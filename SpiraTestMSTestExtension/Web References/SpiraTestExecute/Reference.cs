//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace Inflectra.SpiraTest.AddOns.SpiraTestMSTestExtension.SpiraTestExecute {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TestExecuteSoap", Namespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/")]
    public partial class TestExecute : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ConnectToProjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveTestRunByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordTestRun2OperationCompleted;
        
        private System.Threading.SendOrPostCallback RecordTestRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveServerDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisconnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveProjectListOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TestExecute() {
            this.Url = "http://server/SpiraTest/Services/TestExecute.asmx";
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ConnectToProjectCompletedEventHandler ConnectToProjectCompleted;
        
        /// <remarks/>
        public event RetrieveTestRunByIdCompletedEventHandler RetrieveTestRunByIdCompleted;
        
        /// <remarks/>
        public event RecordTestRun2CompletedEventHandler RecordTestRun2Completed;
        
        /// <remarks/>
        public event RecordTestRunCompletedEventHandler RecordTestRunCompleted;
        
        /// <remarks/>
        public event RetrieveServerDateTimeCompletedEventHandler RetrieveServerDateTimeCompleted;
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        public event DisconnectCompletedEventHandler DisconnectCompleted;
        
        /// <remarks/>
        public event RetrieveProjectListCompletedEventHandler RetrieveProjectListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/ConnectToProject", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConnectToProject(int projectId) {
            object[] results = this.Invoke("ConnectToProject", new object[] {
                        projectId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectToProjectAsync(int projectId) {
            this.ConnectToProjectAsync(projectId, null);
        }
        
        /// <remarks/>
        public void ConnectToProjectAsync(int projectId, object userState) {
            if ((this.ConnectToProjectOperationCompleted == null)) {
                this.ConnectToProjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectToProjectOperationCompleted);
            }
            this.InvokeAsync("ConnectToProject", new object[] {
                        projectId}, this.ConnectToProjectOperationCompleted, userState);
        }
        
        private void OnConnectToProjectOperationCompleted(object arg) {
            if ((this.ConnectToProjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectToProjectCompleted(this, new ConnectToProjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RetrieveTestRunById", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TestRunData RetrieveTestRunById(int testRunId) {
            object[] results = this.Invoke("RetrieveTestRunById", new object[] {
                        testRunId});
            return ((TestRunData)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveTestRunByIdAsync(int testRunId) {
            this.RetrieveTestRunByIdAsync(testRunId, null);
        }
        
        /// <remarks/>
        public void RetrieveTestRunByIdAsync(int testRunId, object userState) {
            if ((this.RetrieveTestRunByIdOperationCompleted == null)) {
                this.RetrieveTestRunByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveTestRunByIdOperationCompleted);
            }
            this.InvokeAsync("RetrieveTestRunById", new object[] {
                        testRunId}, this.RetrieveTestRunByIdOperationCompleted, userState);
        }
        
        private void OnRetrieveTestRunByIdOperationCompleted(object arg) {
            if ((this.RetrieveTestRunByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveTestRunByIdCompleted(this, new RetrieveTestRunByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RecordTestRun2", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RecordTestRun2(string userName, string password, int projectId, int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            object[] results = this.Invoke("RecordTestRun2", new object[] {
                        userName,
                        password,
                        projectId,
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RecordTestRun2Async(string userName, string password, int projectId, int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            this.RecordTestRun2Async(userName, password, projectId, testerUserId, testCaseId, releaseId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, null);
        }
        
        /// <remarks/>
        public void RecordTestRun2Async(string userName, string password, int projectId, int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace, object userState) {
            if ((this.RecordTestRun2OperationCompleted == null)) {
                this.RecordTestRun2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordTestRun2OperationCompleted);
            }
            this.InvokeAsync("RecordTestRun2", new object[] {
                        userName,
                        password,
                        projectId,
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace}, this.RecordTestRun2OperationCompleted, userState);
        }
        
        private void OnRecordTestRun2OperationCompleted(object arg) {
            if ((this.RecordTestRun2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordTestRun2Completed(this, new RecordTestRun2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RecordTestRun", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RecordTestRun(int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            object[] results = this.Invoke("RecordTestRun", new object[] {
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RecordTestRunAsync(int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace) {
            this.RecordTestRunAsync(testerUserId, testCaseId, releaseId, startDate, endDate, executionStatusId, runnerName, runnerTestName, runnerAssertCount, runnerMessage, runnerStackTrace, null);
        }
        
        /// <remarks/>
        public void RecordTestRunAsync(int testerUserId, int testCaseId, int releaseId, System.DateTime startDate, System.DateTime endDate, int executionStatusId, string runnerName, string runnerTestName, int runnerAssertCount, string runnerMessage, string runnerStackTrace, object userState) {
            if ((this.RecordTestRunOperationCompleted == null)) {
                this.RecordTestRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecordTestRunOperationCompleted);
            }
            this.InvokeAsync("RecordTestRun", new object[] {
                        testerUserId,
                        testCaseId,
                        releaseId,
                        startDate,
                        endDate,
                        executionStatusId,
                        runnerName,
                        runnerTestName,
                        runnerAssertCount,
                        runnerMessage,
                        runnerStackTrace}, this.RecordTestRunOperationCompleted, userState);
        }
        
        private void OnRecordTestRunOperationCompleted(object arg) {
            if ((this.RecordTestRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecordTestRunCompleted(this, new RecordTestRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RetrieveServerDateTime", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime RetrieveServerDateTime() {
            object[] results = this.Invoke("RetrieveServerDateTime", new object[0]);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveServerDateTimeAsync() {
            this.RetrieveServerDateTimeAsync(null);
        }
        
        /// <remarks/>
        public void RetrieveServerDateTimeAsync(object userState) {
            if ((this.RetrieveServerDateTimeOperationCompleted == null)) {
                this.RetrieveServerDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveServerDateTimeOperationCompleted);
            }
            this.InvokeAsync("RetrieveServerDateTime", new object[0], this.RetrieveServerDateTimeOperationCompleted, userState);
        }
        
        private void OnRetrieveServerDateTimeOperationCompleted(object arg) {
            if ((this.RetrieveServerDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveServerDateTimeCompleted(this, new RetrieveServerDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/Authenticate", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Authenticate(string userName, string password) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        userName,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password) {
            this.AuthenticateAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userName, string password, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        userName,
                        password}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/Disconnect", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Disconnect() {
            this.Invoke("Disconnect", new object[0]);
        }
        
        /// <remarks/>
        public void DisconnectAsync() {
            this.DisconnectAsync(null);
        }
        
        /// <remarks/>
        public void DisconnectAsync(object userState) {
            if ((this.DisconnectOperationCompleted == null)) {
                this.DisconnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisconnectOperationCompleted);
            }
            this.InvokeAsync("Disconnect", new object[0], this.DisconnectOperationCompleted, userState);
        }
        
        private void OnDisconnectOperationCompleted(object arg) {
            if ((this.DisconnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisconnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.inflectra.com/SpiraTest/Services/v1.2.0/RetrieveProjectList", RequestNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", ResponseNamespace="http://www.inflectra.com/SpiraTest/Services/v1.2.0/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ProjectData RetrieveProjectList() {
            object[] results = this.Invoke("RetrieveProjectList", new object[0]);
            return ((ProjectData)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveProjectListAsync() {
            this.RetrieveProjectListAsync(null);
        }
        
        /// <remarks/>
        public void RetrieveProjectListAsync(object userState) {
            if ((this.RetrieveProjectListOperationCompleted == null)) {
                this.RetrieveProjectListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveProjectListOperationCompleted);
            }
            this.InvokeAsync("RetrieveProjectList", new object[0], this.RetrieveProjectListOperationCompleted, userState);
        }
        
        private void OnRetrieveProjectListOperationCompleted(object arg) {
            if ((this.RetrieveProjectListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveProjectListCompleted(this, new RetrieveProjectListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("TestRunData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class TestRunData : global::System.Data.DataSet {
        
        private TestRunDataTable tableTestRun;
        
        private TestRunStepDataTable tableTestRunStep;
        
        private LinkedIncidentDataTable tableLinkedIncident;
        
        private ExecutionStatusDataTable tableExecutionStatus;
        
        private TestRunTypeDataTable tableTestRunType;
        
        private UserDataTable tableUser;
        
        private ReleaseDataTable tableRelease;
        
        private global::System.Data.DataRelation relationfkTestRunTestRunStep;
        
        private global::System.Data.DataRelation relationfkTestRunStepLinkedIncident;
        
        private global::System.Data.DataRelation relationfkTestRunExecutionStatus;
        
        private global::System.Data.DataRelation relationfkTestRunTester;
        
        private global::System.Data.DataRelation relationfkTestRunRelease;
        
        private global::System.Data.DataRelation relationfkTestRunTestRunType;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TestRunData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected TestRunData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TestRun"] != null)) {
                    base.Tables.Add(new TestRunDataTable(ds.Tables["TestRun"]));
                }
                if ((ds.Tables["TestRunStep"] != null)) {
                    base.Tables.Add(new TestRunStepDataTable(ds.Tables["TestRunStep"]));
                }
                if ((ds.Tables["LinkedIncident"] != null)) {
                    base.Tables.Add(new LinkedIncidentDataTable(ds.Tables["LinkedIncident"]));
                }
                if ((ds.Tables["ExecutionStatus"] != null)) {
                    base.Tables.Add(new ExecutionStatusDataTable(ds.Tables["ExecutionStatus"]));
                }
                if ((ds.Tables["TestRunType"] != null)) {
                    base.Tables.Add(new TestRunTypeDataTable(ds.Tables["TestRunType"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Release"] != null)) {
                    base.Tables.Add(new ReleaseDataTable(ds.Tables["Release"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestRunDataTable TestRun {
            get {
                return this.tableTestRun;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestRunStepDataTable TestRunStep {
            get {
                return this.tableTestRunStep;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LinkedIncidentDataTable LinkedIncident {
            get {
                return this.tableLinkedIncident;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExecutionStatusDataTable ExecutionStatus {
            get {
                return this.tableExecutionStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestRunTypeDataTable TestRunType {
            get {
                return this.tableTestRunType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReleaseDataTable Release {
            get {
                return this.tableRelease;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            TestRunData cln = ((TestRunData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TestRun"] != null)) {
                    base.Tables.Add(new TestRunDataTable(ds.Tables["TestRun"]));
                }
                if ((ds.Tables["TestRunStep"] != null)) {
                    base.Tables.Add(new TestRunStepDataTable(ds.Tables["TestRunStep"]));
                }
                if ((ds.Tables["LinkedIncident"] != null)) {
                    base.Tables.Add(new LinkedIncidentDataTable(ds.Tables["LinkedIncident"]));
                }
                if ((ds.Tables["ExecutionStatus"] != null)) {
                    base.Tables.Add(new ExecutionStatusDataTable(ds.Tables["ExecutionStatus"]));
                }
                if ((ds.Tables["TestRunType"] != null)) {
                    base.Tables.Add(new TestRunTypeDataTable(ds.Tables["TestRunType"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Release"] != null)) {
                    base.Tables.Add(new ReleaseDataTable(ds.Tables["Release"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTestRun = ((TestRunDataTable)(base.Tables["TestRun"]));
            if ((initTable == true)) {
                if ((this.tableTestRun != null)) {
                    this.tableTestRun.InitVars();
                }
            }
            this.tableTestRunStep = ((TestRunStepDataTable)(base.Tables["TestRunStep"]));
            if ((initTable == true)) {
                if ((this.tableTestRunStep != null)) {
                    this.tableTestRunStep.InitVars();
                }
            }
            this.tableLinkedIncident = ((LinkedIncidentDataTable)(base.Tables["LinkedIncident"]));
            if ((initTable == true)) {
                if ((this.tableLinkedIncident != null)) {
                    this.tableLinkedIncident.InitVars();
                }
            }
            this.tableExecutionStatus = ((ExecutionStatusDataTable)(base.Tables["ExecutionStatus"]));
            if ((initTable == true)) {
                if ((this.tableExecutionStatus != null)) {
                    this.tableExecutionStatus.InitVars();
                }
            }
            this.tableTestRunType = ((TestRunTypeDataTable)(base.Tables["TestRunType"]));
            if ((initTable == true)) {
                if ((this.tableTestRunType != null)) {
                    this.tableTestRunType.InitVars();
                }
            }
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
            this.tableRelease = ((ReleaseDataTable)(base.Tables["Release"]));
            if ((initTable == true)) {
                if ((this.tableRelease != null)) {
                    this.tableRelease.InitVars();
                }
            }
            this.relationfkTestRunTestRunStep = this.Relations["fkTestRunTestRunStep"];
            this.relationfkTestRunStepLinkedIncident = this.Relations["fkTestRunStepLinkedIncident"];
            this.relationfkTestRunExecutionStatus = this.Relations["fkTestRunExecutionStatus"];
            this.relationfkTestRunTester = this.Relations["fkTestRunTester"];
            this.relationfkTestRunRelease = this.Relations["fkTestRunRelease"];
            this.relationfkTestRunTestRunType = this.Relations["fkTestRunTestRunType"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "TestRunData";
            this.Prefix = "";
            this.Namespace = "http://www.inflectra.com/SpiraTest/DataSets/TestRunDataSet.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("en-US");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTestRun = new TestRunDataTable();
            base.Tables.Add(this.tableTestRun);
            this.tableTestRunStep = new TestRunStepDataTable();
            base.Tables.Add(this.tableTestRunStep);
            this.tableLinkedIncident = new LinkedIncidentDataTable();
            base.Tables.Add(this.tableLinkedIncident);
            this.tableExecutionStatus = new ExecutionStatusDataTable();
            base.Tables.Add(this.tableExecutionStatus);
            this.tableTestRunType = new TestRunTypeDataTable();
            base.Tables.Add(this.tableTestRunType);
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
            this.tableRelease = new ReleaseDataTable();
            base.Tables.Add(this.tableRelease);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("fkTestRunTestRunStep", new global::System.Data.DataColumn[] {
                        this.tableTestRun.TestRunIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestRunStep.TestRunIdColumn});
            this.tableTestRunStep.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("fkTestRunStepLinkedIncident", new global::System.Data.DataColumn[] {
                        this.tableTestRunStep.TestRunStepIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkedIncident.TestRunStepIdColumn});
            this.tableLinkedIncident.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationfkTestRunTestRunStep = new global::System.Data.DataRelation("fkTestRunTestRunStep", new global::System.Data.DataColumn[] {
                        this.tableTestRun.TestRunIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestRunStep.TestRunIdColumn}, false);
            this.Relations.Add(this.relationfkTestRunTestRunStep);
            this.relationfkTestRunStepLinkedIncident = new global::System.Data.DataRelation("fkTestRunStepLinkedIncident", new global::System.Data.DataColumn[] {
                        this.tableTestRunStep.TestRunStepIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableLinkedIncident.TestRunStepIdColumn}, false);
            this.Relations.Add(this.relationfkTestRunStepLinkedIncident);
            this.relationfkTestRunExecutionStatus = new global::System.Data.DataRelation("fkTestRunExecutionStatus", new global::System.Data.DataColumn[] {
                        this.tableTestRun.ExecutionStatusIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableExecutionStatus.ExecutionStatusIdColumn}, false);
            this.Relations.Add(this.relationfkTestRunExecutionStatus);
            this.relationfkTestRunTester = new global::System.Data.DataRelation("fkTestRunTester", new global::System.Data.DataColumn[] {
                        this.tableTestRun.TesterIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableUser.UserIdColumn}, false);
            this.Relations.Add(this.relationfkTestRunTester);
            this.relationfkTestRunRelease = new global::System.Data.DataRelation("fkTestRunRelease", new global::System.Data.DataColumn[] {
                        this.tableTestRun.ReleaseIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableRelease.ReleaseIdColumn}, false);
            this.Relations.Add(this.relationfkTestRunRelease);
            this.relationfkTestRunTestRunType = new global::System.Data.DataRelation("fkTestRunTestRunType", new global::System.Data.DataColumn[] {
                        this.tableTestRun.TestRunTypeIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestRunType.TestRunTypeIdColumn}, false);
            this.Relations.Add(this.relationfkTestRunTestRunType);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestRun() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestRunStep() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLinkedIncident() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExecutionStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTestRunType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRelease() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            TestRunData ds = new TestRunData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TestRunRowChangeEventHandler(object sender, TestRunRowChangeEvent e);
        
        public delegate void TestRunStepRowChangeEventHandler(object sender, TestRunStepRowChangeEvent e);
        
        public delegate void LinkedIncidentRowChangeEventHandler(object sender, LinkedIncidentRowChangeEvent e);
        
        public delegate void ExecutionStatusRowChangeEventHandler(object sender, ExecutionStatusRowChangeEvent e);
        
        public delegate void TestRunTypeRowChangeEventHandler(object sender, TestRunTypeRowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void ReleaseRowChangeEventHandler(object sender, ReleaseRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestRunDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTestRunId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnTestCaseId;
            
            private global::System.Data.DataColumn columnTestRunTypeId;
            
            private global::System.Data.DataColumn columnTesterId;
            
            private global::System.Data.DataColumn columnExecutionStatusId;
            
            private global::System.Data.DataColumn columnReleaseId;
            
            private global::System.Data.DataColumn columnEstimatedDuration;
            
            private global::System.Data.DataColumn columnActualDuration;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnRunnerName;
            
            private global::System.Data.DataColumn columnRunnerTestName;
            
            private global::System.Data.DataColumn columnRunnerAssertCount;
            
            private global::System.Data.DataColumn columnRunnerMessage;
            
            private global::System.Data.DataColumn columnRunnerStackTrace;
            
            private global::System.Data.DataColumn columnTestRunTypeName;
            
            private global::System.Data.DataColumn columnTesterName;
            
            private global::System.Data.DataColumn columnExecutionStatusName;
            
            private global::System.Data.DataColumn columnReleaseName;
            
            private global::System.Data.DataColumn columnReleaseVersionNumber;
            
            private global::System.Data.DataColumn columnText01;
            
            private global::System.Data.DataColumn columnText02;
            
            private global::System.Data.DataColumn columnText03;
            
            private global::System.Data.DataColumn columnText04;
            
            private global::System.Data.DataColumn columnText05;
            
            private global::System.Data.DataColumn columnText06;
            
            private global::System.Data.DataColumn columnText07;
            
            private global::System.Data.DataColumn columnText08;
            
            private global::System.Data.DataColumn columnText09;
            
            private global::System.Data.DataColumn columnText10;
            
            private global::System.Data.DataColumn columnList01;
            
            private global::System.Data.DataColumn columnList02;
            
            private global::System.Data.DataColumn columnList03;
            
            private global::System.Data.DataColumn columnList04;
            
            private global::System.Data.DataColumn columnList05;
            
            private global::System.Data.DataColumn columnList06;
            
            private global::System.Data.DataColumn columnList07;
            
            private global::System.Data.DataColumn columnList08;
            
            private global::System.Data.DataColumn columnList09;
            
            private global::System.Data.DataColumn columnList10;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunDataTable() {
                this.TableName = "TestRun";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestRunDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunIdColumn {
                get {
                    return this.columnTestRunId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestCaseIdColumn {
                get {
                    return this.columnTestCaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunTypeIdColumn {
                get {
                    return this.columnTestRunTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TesterIdColumn {
                get {
                    return this.columnTesterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusIdColumn {
                get {
                    return this.columnExecutionStatusId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseIdColumn {
                get {
                    return this.columnReleaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstimatedDurationColumn {
                get {
                    return this.columnEstimatedDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualDurationColumn {
                get {
                    return this.columnActualDuration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerNameColumn {
                get {
                    return this.columnRunnerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerTestNameColumn {
                get {
                    return this.columnRunnerTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerAssertCountColumn {
                get {
                    return this.columnRunnerAssertCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerMessageColumn {
                get {
                    return this.columnRunnerMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RunnerStackTraceColumn {
                get {
                    return this.columnRunnerStackTrace;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunTypeNameColumn {
                get {
                    return this.columnTestRunTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TesterNameColumn {
                get {
                    return this.columnTesterName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusNameColumn {
                get {
                    return this.columnExecutionStatusName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseNameColumn {
                get {
                    return this.columnReleaseName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseVersionNumberColumn {
                get {
                    return this.columnReleaseVersionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text01Column {
                get {
                    return this.columnText01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text02Column {
                get {
                    return this.columnText02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text03Column {
                get {
                    return this.columnText03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text04Column {
                get {
                    return this.columnText04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text05Column {
                get {
                    return this.columnText05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text06Column {
                get {
                    return this.columnText06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text07Column {
                get {
                    return this.columnText07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text08Column {
                get {
                    return this.columnText08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text09Column {
                get {
                    return this.columnText09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text10Column {
                get {
                    return this.columnText10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List01Column {
                get {
                    return this.columnList01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List02Column {
                get {
                    return this.columnList02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List03Column {
                get {
                    return this.columnList03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List04Column {
                get {
                    return this.columnList04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List05Column {
                get {
                    return this.columnList05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List06Column {
                get {
                    return this.columnList06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List07Column {
                get {
                    return this.columnList07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List08Column {
                get {
                    return this.columnList08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List09Column {
                get {
                    return this.columnList09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List10Column {
                get {
                    return this.columnList10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow this[int index] {
                get {
                    return ((TestRunRow)(this.Rows[index]));
                }
            }
            
            public event TestRunRowChangeEventHandler TestRunRowChanging;
            
            public event TestRunRowChangeEventHandler TestRunRowChanged;
            
            public event TestRunRowChangeEventHandler TestRunRowDeleting;
            
            public event TestRunRowChangeEventHandler TestRunRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestRunRow(TestRunRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow AddTestRunRow(
                        string Name, 
                        string Description, 
                        int TestCaseId, 
                        int TestRunTypeId, 
                        int TesterId, 
                        int ExecutionStatusId, 
                        int ReleaseId, 
                        int EstimatedDuration, 
                        int ActualDuration, 
                        System.DateTime StartDate, 
                        System.DateTime EndDate, 
                        string RunnerName, 
                        string RunnerTestName, 
                        int RunnerAssertCount, 
                        string RunnerMessage, 
                        string RunnerStackTrace, 
                        string TestRunTypeName, 
                        string TesterName, 
                        string ExecutionStatusName, 
                        string ReleaseName, 
                        string ReleaseVersionNumber, 
                        string Text01, 
                        string Text02, 
                        string Text03, 
                        string Text04, 
                        string Text05, 
                        string Text06, 
                        string Text07, 
                        string Text08, 
                        string Text09, 
                        string Text10, 
                        int List01, 
                        int List02, 
                        int List03, 
                        int List04, 
                        int List05, 
                        int List06, 
                        int List07, 
                        int List08, 
                        int List09, 
                        int List10) {
                TestRunRow rowTestRunRow = ((TestRunRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Description,
                        TestCaseId,
                        TestRunTypeId,
                        TesterId,
                        ExecutionStatusId,
                        ReleaseId,
                        EstimatedDuration,
                        ActualDuration,
                        StartDate,
                        EndDate,
                        RunnerName,
                        RunnerTestName,
                        RunnerAssertCount,
                        RunnerMessage,
                        RunnerStackTrace,
                        TestRunTypeName,
                        TesterName,
                        ExecutionStatusName,
                        ReleaseName,
                        ReleaseVersionNumber,
                        Text01,
                        Text02,
                        Text03,
                        Text04,
                        Text05,
                        Text06,
                        Text07,
                        Text08,
                        Text09,
                        Text10,
                        List01,
                        List02,
                        List03,
                        List04,
                        List05,
                        List06,
                        List07,
                        List08,
                        List09,
                        List10};
                rowTestRunRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestRunRow);
                return rowTestRunRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow FindByTestRunId(int TestRunId) {
                return ((TestRunRow)(this.Rows.Find(new object[] {
                            TestRunId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestRunDataTable cln = ((TestRunDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestRunDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestRunId = base.Columns["TestRunId"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnTestCaseId = base.Columns["TestCaseId"];
                this.columnTestRunTypeId = base.Columns["TestRunTypeId"];
                this.columnTesterId = base.Columns["TesterId"];
                this.columnExecutionStatusId = base.Columns["ExecutionStatusId"];
                this.columnReleaseId = base.Columns["ReleaseId"];
                this.columnEstimatedDuration = base.Columns["EstimatedDuration"];
                this.columnActualDuration = base.Columns["ActualDuration"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnRunnerName = base.Columns["RunnerName"];
                this.columnRunnerTestName = base.Columns["RunnerTestName"];
                this.columnRunnerAssertCount = base.Columns["RunnerAssertCount"];
                this.columnRunnerMessage = base.Columns["RunnerMessage"];
                this.columnRunnerStackTrace = base.Columns["RunnerStackTrace"];
                this.columnTestRunTypeName = base.Columns["TestRunTypeName"];
                this.columnTesterName = base.Columns["TesterName"];
                this.columnExecutionStatusName = base.Columns["ExecutionStatusName"];
                this.columnReleaseName = base.Columns["ReleaseName"];
                this.columnReleaseVersionNumber = base.Columns["ReleaseVersionNumber"];
                this.columnText01 = base.Columns["Text01"];
                this.columnText02 = base.Columns["Text02"];
                this.columnText03 = base.Columns["Text03"];
                this.columnText04 = base.Columns["Text04"];
                this.columnText05 = base.Columns["Text05"];
                this.columnText06 = base.Columns["Text06"];
                this.columnText07 = base.Columns["Text07"];
                this.columnText08 = base.Columns["Text08"];
                this.columnText09 = base.Columns["Text09"];
                this.columnText10 = base.Columns["Text10"];
                this.columnList01 = base.Columns["List01"];
                this.columnList02 = base.Columns["List02"];
                this.columnList03 = base.Columns["List03"];
                this.columnList04 = base.Columns["List04"];
                this.columnList05 = base.Columns["List05"];
                this.columnList06 = base.Columns["List06"];
                this.columnList07 = base.Columns["List07"];
                this.columnList08 = base.Columns["List08"];
                this.columnList09 = base.Columns["List09"];
                this.columnList10 = base.Columns["List10"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestRunId = new global::System.Data.DataColumn("TestRunId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnTestCaseId = new global::System.Data.DataColumn("TestCaseId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseId);
                this.columnTestRunTypeId = new global::System.Data.DataColumn("TestRunTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunTypeId);
                this.columnTesterId = new global::System.Data.DataColumn("TesterId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTesterId);
                this.columnExecutionStatusId = new global::System.Data.DataColumn("ExecutionStatusId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatusId);
                this.columnReleaseId = new global::System.Data.DataColumn("ReleaseId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReleaseId);
                this.columnEstimatedDuration = new global::System.Data.DataColumn("EstimatedDuration", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstimatedDuration);
                this.columnActualDuration = new global::System.Data.DataColumn("ActualDuration", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualDuration);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnRunnerName = new global::System.Data.DataColumn("RunnerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerName);
                this.columnRunnerTestName = new global::System.Data.DataColumn("RunnerTestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerTestName);
                this.columnRunnerAssertCount = new global::System.Data.DataColumn("RunnerAssertCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerAssertCount);
                this.columnRunnerMessage = new global::System.Data.DataColumn("RunnerMessage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerMessage);
                this.columnRunnerStackTrace = new global::System.Data.DataColumn("RunnerStackTrace", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRunnerStackTrace);
                this.columnTestRunTypeName = new global::System.Data.DataColumn("TestRunTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunTypeName);
                this.columnTesterName = new global::System.Data.DataColumn("TesterName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTesterName);
                this.columnExecutionStatusName = new global::System.Data.DataColumn("ExecutionStatusName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatusName);
                this.columnReleaseName = new global::System.Data.DataColumn("ReleaseName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReleaseName);
                this.columnReleaseVersionNumber = new global::System.Data.DataColumn("ReleaseVersionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReleaseVersionNumber);
                this.columnText01 = new global::System.Data.DataColumn("Text01", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText01);
                this.columnText02 = new global::System.Data.DataColumn("Text02", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText02);
                this.columnText03 = new global::System.Data.DataColumn("Text03", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText03);
                this.columnText04 = new global::System.Data.DataColumn("Text04", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText04);
                this.columnText05 = new global::System.Data.DataColumn("Text05", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText05);
                this.columnText06 = new global::System.Data.DataColumn("Text06", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText06);
                this.columnText07 = new global::System.Data.DataColumn("Text07", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText07);
                this.columnText08 = new global::System.Data.DataColumn("Text08", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText08);
                this.columnText09 = new global::System.Data.DataColumn("Text09", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText09);
                this.columnText10 = new global::System.Data.DataColumn("Text10", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText10);
                this.columnList01 = new global::System.Data.DataColumn("List01", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList01);
                this.columnList02 = new global::System.Data.DataColumn("List02", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList02);
                this.columnList03 = new global::System.Data.DataColumn("List03", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList03);
                this.columnList04 = new global::System.Data.DataColumn("List04", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList04);
                this.columnList05 = new global::System.Data.DataColumn("List05", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList05);
                this.columnList06 = new global::System.Data.DataColumn("List06", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList06);
                this.columnList07 = new global::System.Data.DataColumn("List07", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList07);
                this.columnList08 = new global::System.Data.DataColumn("List08", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList08);
                this.columnList09 = new global::System.Data.DataColumn("List09", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList09);
                this.columnList10 = new global::System.Data.DataColumn("List10", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList10);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkTestRun", new global::System.Data.DataColumn[] {
                                this.columnTestRunId}, true));
                this.columnTestRunId.AutoIncrement = true;
                this.columnTestRunId.AutoIncrementSeed = -1;
                this.columnTestRunId.AutoIncrementStep = -1;
                this.columnTestRunId.AllowDBNull = false;
                this.columnTestRunId.ReadOnly = true;
                this.columnTestRunId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnTestCaseId.AllowDBNull = false;
                this.columnTestRunTypeId.AllowDBNull = false;
                this.columnTesterId.AllowDBNull = false;
                this.columnExecutionStatusId.AllowDBNull = false;
                this.columnActualDuration.ReadOnly = true;
                this.columnStartDate.AllowDBNull = false;
                this.columnTestRunTypeName.ReadOnly = true;
                this.columnTesterName.ReadOnly = true;
                this.columnExecutionStatusName.ReadOnly = true;
                this.columnReleaseName.ReadOnly = true;
                this.columnReleaseVersionNumber.ReadOnly = true;
                this.columnText01.ReadOnly = true;
                this.columnText02.ReadOnly = true;
                this.columnText03.ReadOnly = true;
                this.columnText04.ReadOnly = true;
                this.columnText05.ReadOnly = true;
                this.columnText06.ReadOnly = true;
                this.columnText07.ReadOnly = true;
                this.columnText08.ReadOnly = true;
                this.columnText09.ReadOnly = true;
                this.columnText10.ReadOnly = true;
                this.columnList01.ReadOnly = true;
                this.columnList02.ReadOnly = true;
                this.columnList03.ReadOnly = true;
                this.columnList04.ReadOnly = true;
                this.columnList05.ReadOnly = true;
                this.columnList06.ReadOnly = true;
                this.columnList07.ReadOnly = true;
                this.columnList08.ReadOnly = true;
                this.columnList09.ReadOnly = true;
                this.columnList10.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow NewTestRunRow() {
                return ((TestRunRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestRunRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestRunRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRunRowChanged != null)) {
                    this.TestRunRowChanged(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRunRowChanging != null)) {
                    this.TestRunRowChanging(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRunRowDeleted != null)) {
                    this.TestRunRowDeleted(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRunRowDeleting != null)) {
                    this.TestRunRowDeleting(this, new TestRunRowChangeEvent(((TestRunRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestRunRow(TestRunRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TestRunData ds = new TestRunData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestRunDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestRunStepDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTestRunStepId;
            
            private global::System.Data.DataColumn columnTestRunId;
            
            private global::System.Data.DataColumn columnTestStepId;
            
            private global::System.Data.DataColumn columnExecutionStatusId;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnPosition;
            
            private global::System.Data.DataColumn columnExpectedResult;
            
            private global::System.Data.DataColumn columnSampleData;
            
            private global::System.Data.DataColumn columnActualResult;
            
            private global::System.Data.DataColumn columnTestCaseId;
            
            private global::System.Data.DataColumn columnExecutionStatusName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepDataTable() {
                this.TableName = "TestRunStep";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunStepDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestRunStepDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunStepIdColumn {
                get {
                    return this.columnTestRunStepId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunIdColumn {
                get {
                    return this.columnTestRunId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestStepIdColumn {
                get {
                    return this.columnTestStepId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusIdColumn {
                get {
                    return this.columnExecutionStatusId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpectedResultColumn {
                get {
                    return this.columnExpectedResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SampleDataColumn {
                get {
                    return this.columnSampleData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualResultColumn {
                get {
                    return this.columnActualResult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestCaseIdColumn {
                get {
                    return this.columnTestCaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusNameColumn {
                get {
                    return this.columnExecutionStatusName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow this[int index] {
                get {
                    return ((TestRunStepRow)(this.Rows[index]));
                }
            }
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowChanging;
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowChanged;
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowDeleting;
            
            public event TestRunStepRowChangeEventHandler TestRunStepRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestRunStepRow(TestRunStepRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow AddTestRunStepRow(TestRunRow parentTestRunRowByfkTestRunTestRunStep, int TestStepId, int ExecutionStatusId, string Description, int Position, string ExpectedResult, string SampleData, string ActualResult, int TestCaseId, string ExecutionStatusName) {
                TestRunStepRow rowTestRunStepRow = ((TestRunStepRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        TestStepId,
                        ExecutionStatusId,
                        Description,
                        Position,
                        ExpectedResult,
                        SampleData,
                        ActualResult,
                        TestCaseId,
                        ExecutionStatusName};
                if ((parentTestRunRowByfkTestRunTestRunStep != null)) {
                    columnValuesArray[1] = parentTestRunRowByfkTestRunTestRunStep[0];
                }
                rowTestRunStepRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestRunStepRow);
                return rowTestRunStepRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow FindByTestRunStepId(int TestRunStepId) {
                return ((TestRunStepRow)(this.Rows.Find(new object[] {
                            TestRunStepId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestRunStepDataTable cln = ((TestRunStepDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestRunStepDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestRunStepId = base.Columns["TestRunStepId"];
                this.columnTestRunId = base.Columns["TestRunId"];
                this.columnTestStepId = base.Columns["TestStepId"];
                this.columnExecutionStatusId = base.Columns["ExecutionStatusId"];
                this.columnDescription = base.Columns["Description"];
                this.columnPosition = base.Columns["Position"];
                this.columnExpectedResult = base.Columns["ExpectedResult"];
                this.columnSampleData = base.Columns["SampleData"];
                this.columnActualResult = base.Columns["ActualResult"];
                this.columnTestCaseId = base.Columns["TestCaseId"];
                this.columnExecutionStatusName = base.Columns["ExecutionStatusName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestRunStepId = new global::System.Data.DataColumn("TestRunStepId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunStepId);
                this.columnTestRunId = new global::System.Data.DataColumn("TestRunId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunId);
                this.columnTestStepId = new global::System.Data.DataColumn("TestStepId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestStepId);
                this.columnExecutionStatusId = new global::System.Data.DataColumn("ExecutionStatusId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatusId);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnPosition = new global::System.Data.DataColumn("Position", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosition);
                this.columnExpectedResult = new global::System.Data.DataColumn("ExpectedResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpectedResult);
                this.columnSampleData = new global::System.Data.DataColumn("SampleData", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSampleData);
                this.columnActualResult = new global::System.Data.DataColumn("ActualResult", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualResult);
                this.columnTestCaseId = new global::System.Data.DataColumn("TestCaseId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestCaseId);
                this.columnExecutionStatusName = new global::System.Data.DataColumn("ExecutionStatusName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatusName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkTestRunStep", new global::System.Data.DataColumn[] {
                                this.columnTestRunStepId}, true));
                this.columnTestRunStepId.AutoIncrement = true;
                this.columnTestRunStepId.AutoIncrementSeed = -1;
                this.columnTestRunStepId.AutoIncrementStep = -1;
                this.columnTestRunStepId.AllowDBNull = false;
                this.columnTestRunStepId.ReadOnly = true;
                this.columnTestRunStepId.Unique = true;
                this.columnTestRunId.AllowDBNull = false;
                this.columnExecutionStatusId.AllowDBNull = false;
                this.columnDescription.AllowDBNull = false;
                this.columnPosition.AllowDBNull = false;
                this.columnExecutionStatusName.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow NewTestRunStepRow() {
                return ((TestRunStepRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestRunStepRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestRunStepRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRunStepRowChanged != null)) {
                    this.TestRunStepRowChanged(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRunStepRowChanging != null)) {
                    this.TestRunStepRowChanging(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRunStepRowDeleted != null)) {
                    this.TestRunStepRowDeleted(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRunStepRowDeleting != null)) {
                    this.TestRunStepRowDeleting(this, new TestRunStepRowChangeEvent(((TestRunStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestRunStepRow(TestRunStepRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TestRunData ds = new TestRunData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestRunStepDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LinkedIncidentDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTestRunStepId;
            
            private global::System.Data.DataColumn columnPriorityId;
            
            private global::System.Data.DataColumn columnSeverityId;
            
            private global::System.Data.DataColumn columnIncidentTypeId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnText01;
            
            private global::System.Data.DataColumn columnText02;
            
            private global::System.Data.DataColumn columnText03;
            
            private global::System.Data.DataColumn columnText04;
            
            private global::System.Data.DataColumn columnText05;
            
            private global::System.Data.DataColumn columnText06;
            
            private global::System.Data.DataColumn columnText07;
            
            private global::System.Data.DataColumn columnText08;
            
            private global::System.Data.DataColumn columnText09;
            
            private global::System.Data.DataColumn columnText10;
            
            private global::System.Data.DataColumn columnList01;
            
            private global::System.Data.DataColumn columnList02;
            
            private global::System.Data.DataColumn columnList03;
            
            private global::System.Data.DataColumn columnList04;
            
            private global::System.Data.DataColumn columnList05;
            
            private global::System.Data.DataColumn columnList06;
            
            private global::System.Data.DataColumn columnList07;
            
            private global::System.Data.DataColumn columnList08;
            
            private global::System.Data.DataColumn columnList09;
            
            private global::System.Data.DataColumn columnList10;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedIncidentDataTable() {
                this.TableName = "LinkedIncident";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkedIncidentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LinkedIncidentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunStepIdColumn {
                get {
                    return this.columnTestRunStepId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityIdColumn {
                get {
                    return this.columnPriorityId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SeverityIdColumn {
                get {
                    return this.columnSeverityId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IncidentTypeIdColumn {
                get {
                    return this.columnIncidentTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text01Column {
                get {
                    return this.columnText01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text02Column {
                get {
                    return this.columnText02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text03Column {
                get {
                    return this.columnText03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text04Column {
                get {
                    return this.columnText04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text05Column {
                get {
                    return this.columnText05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text06Column {
                get {
                    return this.columnText06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text07Column {
                get {
                    return this.columnText07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text08Column {
                get {
                    return this.columnText08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text09Column {
                get {
                    return this.columnText09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Text10Column {
                get {
                    return this.columnText10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List01Column {
                get {
                    return this.columnList01;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List02Column {
                get {
                    return this.columnList02;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List03Column {
                get {
                    return this.columnList03;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List04Column {
                get {
                    return this.columnList04;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List05Column {
                get {
                    return this.columnList05;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List06Column {
                get {
                    return this.columnList06;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List07Column {
                get {
                    return this.columnList07;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List08Column {
                get {
                    return this.columnList08;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List09Column {
                get {
                    return this.columnList09;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn List10Column {
                get {
                    return this.columnList10;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedIncidentRow this[int index] {
                get {
                    return ((LinkedIncidentRow)(this.Rows[index]));
                }
            }
            
            public event LinkedIncidentRowChangeEventHandler LinkedIncidentRowChanging;
            
            public event LinkedIncidentRowChangeEventHandler LinkedIncidentRowChanged;
            
            public event LinkedIncidentRowChangeEventHandler LinkedIncidentRowDeleting;
            
            public event LinkedIncidentRowChangeEventHandler LinkedIncidentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLinkedIncidentRow(LinkedIncidentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedIncidentRow AddLinkedIncidentRow(
                        TestRunStepRow parentTestRunStepRowByfkTestRunStepLinkedIncident, 
                        int PriorityId, 
                        int SeverityId, 
                        int IncidentTypeId, 
                        string Name, 
                        string Text01, 
                        string Text02, 
                        string Text03, 
                        string Text04, 
                        string Text05, 
                        string Text06, 
                        string Text07, 
                        string Text08, 
                        string Text09, 
                        string Text10, 
                        int List01, 
                        int List02, 
                        int List03, 
                        int List04, 
                        int List05, 
                        int List06, 
                        int List07, 
                        int List08, 
                        int List09, 
                        int List10) {
                LinkedIncidentRow rowLinkedIncidentRow = ((LinkedIncidentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PriorityId,
                        SeverityId,
                        IncidentTypeId,
                        Name,
                        Text01,
                        Text02,
                        Text03,
                        Text04,
                        Text05,
                        Text06,
                        Text07,
                        Text08,
                        Text09,
                        Text10,
                        List01,
                        List02,
                        List03,
                        List04,
                        List05,
                        List06,
                        List07,
                        List08,
                        List09,
                        List10};
                if ((parentTestRunStepRowByfkTestRunStepLinkedIncident != null)) {
                    columnValuesArray[0] = parentTestRunStepRowByfkTestRunStepLinkedIncident[0];
                }
                rowLinkedIncidentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLinkedIncidentRow);
                return rowLinkedIncidentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LinkedIncidentDataTable cln = ((LinkedIncidentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LinkedIncidentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestRunStepId = base.Columns["TestRunStepId"];
                this.columnPriorityId = base.Columns["PriorityId"];
                this.columnSeverityId = base.Columns["SeverityId"];
                this.columnIncidentTypeId = base.Columns["IncidentTypeId"];
                this.columnName = base.Columns["Name"];
                this.columnText01 = base.Columns["Text01"];
                this.columnText02 = base.Columns["Text02"];
                this.columnText03 = base.Columns["Text03"];
                this.columnText04 = base.Columns["Text04"];
                this.columnText05 = base.Columns["Text05"];
                this.columnText06 = base.Columns["Text06"];
                this.columnText07 = base.Columns["Text07"];
                this.columnText08 = base.Columns["Text08"];
                this.columnText09 = base.Columns["Text09"];
                this.columnText10 = base.Columns["Text10"];
                this.columnList01 = base.Columns["List01"];
                this.columnList02 = base.Columns["List02"];
                this.columnList03 = base.Columns["List03"];
                this.columnList04 = base.Columns["List04"];
                this.columnList05 = base.Columns["List05"];
                this.columnList06 = base.Columns["List06"];
                this.columnList07 = base.Columns["List07"];
                this.columnList08 = base.Columns["List08"];
                this.columnList09 = base.Columns["List09"];
                this.columnList10 = base.Columns["List10"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestRunStepId = new global::System.Data.DataColumn("TestRunStepId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunStepId);
                this.columnPriorityId = new global::System.Data.DataColumn("PriorityId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriorityId);
                this.columnSeverityId = new global::System.Data.DataColumn("SeverityId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeverityId);
                this.columnIncidentTypeId = new global::System.Data.DataColumn("IncidentTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncidentTypeId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnText01 = new global::System.Data.DataColumn("Text01", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText01);
                this.columnText02 = new global::System.Data.DataColumn("Text02", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText02);
                this.columnText03 = new global::System.Data.DataColumn("Text03", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText03);
                this.columnText04 = new global::System.Data.DataColumn("Text04", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText04);
                this.columnText05 = new global::System.Data.DataColumn("Text05", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText05);
                this.columnText06 = new global::System.Data.DataColumn("Text06", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText06);
                this.columnText07 = new global::System.Data.DataColumn("Text07", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText07);
                this.columnText08 = new global::System.Data.DataColumn("Text08", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText08);
                this.columnText09 = new global::System.Data.DataColumn("Text09", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText09);
                this.columnText10 = new global::System.Data.DataColumn("Text10", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnText10);
                this.columnList01 = new global::System.Data.DataColumn("List01", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList01);
                this.columnList02 = new global::System.Data.DataColumn("List02", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList02);
                this.columnList03 = new global::System.Data.DataColumn("List03", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList03);
                this.columnList04 = new global::System.Data.DataColumn("List04", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList04);
                this.columnList05 = new global::System.Data.DataColumn("List05", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList05);
                this.columnList06 = new global::System.Data.DataColumn("List06", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList06);
                this.columnList07 = new global::System.Data.DataColumn("List07", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList07);
                this.columnList08 = new global::System.Data.DataColumn("List08", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList08);
                this.columnList09 = new global::System.Data.DataColumn("List09", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList09);
                this.columnList10 = new global::System.Data.DataColumn("List10", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnList10);
                this.columnTestRunStepId.AllowDBNull = false;
                this.columnIncidentTypeId.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedIncidentRow NewLinkedIncidentRow() {
                return ((LinkedIncidentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LinkedIncidentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LinkedIncidentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LinkedIncidentRowChanged != null)) {
                    this.LinkedIncidentRowChanged(this, new LinkedIncidentRowChangeEvent(((LinkedIncidentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LinkedIncidentRowChanging != null)) {
                    this.LinkedIncidentRowChanging(this, new LinkedIncidentRowChangeEvent(((LinkedIncidentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LinkedIncidentRowDeleted != null)) {
                    this.LinkedIncidentRowDeleted(this, new LinkedIncidentRowChangeEvent(((LinkedIncidentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LinkedIncidentRowDeleting != null)) {
                    this.LinkedIncidentRowDeleting(this, new LinkedIncidentRowChangeEvent(((LinkedIncidentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLinkedIncidentRow(LinkedIncidentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TestRunData ds = new TestRunData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LinkedIncidentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExecutionStatusDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnExecutionStatusId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnActiveYn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutionStatusDataTable() {
                this.TableName = "ExecutionStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExecutionStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExecutionStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExecutionStatusIdColumn {
                get {
                    return this.columnExecutionStatusId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveYnColumn {
                get {
                    return this.columnActiveYn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutionStatusRow this[int index] {
                get {
                    return ((ExecutionStatusRow)(this.Rows[index]));
                }
            }
            
            public event ExecutionStatusRowChangeEventHandler ExecutionStatusRowChanging;
            
            public event ExecutionStatusRowChangeEventHandler ExecutionStatusRowChanged;
            
            public event ExecutionStatusRowChangeEventHandler ExecutionStatusRowDeleting;
            
            public event ExecutionStatusRowChangeEventHandler ExecutionStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExecutionStatusRow(ExecutionStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutionStatusRow AddExecutionStatusRow(string Name, string ActiveYn) {
                ExecutionStatusRow rowExecutionStatusRow = ((ExecutionStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        ActiveYn};
                rowExecutionStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExecutionStatusRow);
                return rowExecutionStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExecutionStatusDataTable cln = ((ExecutionStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExecutionStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnExecutionStatusId = base.Columns["ExecutionStatusId"];
                this.columnName = base.Columns["Name"];
                this.columnActiveYn = base.Columns["ActiveYn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnExecutionStatusId = new global::System.Data.DataColumn("ExecutionStatusId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExecutionStatusId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnActiveYn = new global::System.Data.DataColumn("ActiveYn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveYn);
                this.columnExecutionStatusId.AutoIncrement = true;
                this.columnExecutionStatusId.AutoIncrementSeed = -1;
                this.columnExecutionStatusId.AutoIncrementStep = -1;
                this.columnExecutionStatusId.AllowDBNull = false;
                this.columnExecutionStatusId.ReadOnly = true;
                this.columnName.AllowDBNull = false;
                this.columnActiveYn.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutionStatusRow NewExecutionStatusRow() {
                return ((ExecutionStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExecutionStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExecutionStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExecutionStatusRowChanged != null)) {
                    this.ExecutionStatusRowChanged(this, new ExecutionStatusRowChangeEvent(((ExecutionStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExecutionStatusRowChanging != null)) {
                    this.ExecutionStatusRowChanging(this, new ExecutionStatusRowChangeEvent(((ExecutionStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExecutionStatusRowDeleted != null)) {
                    this.ExecutionStatusRowDeleted(this, new ExecutionStatusRowChangeEvent(((ExecutionStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExecutionStatusRowDeleting != null)) {
                    this.ExecutionStatusRowDeleting(this, new ExecutionStatusRowChangeEvent(((ExecutionStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExecutionStatusRow(ExecutionStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TestRunData ds = new TestRunData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExecutionStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestRunTypeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTestRunTypeId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnActiveYn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunTypeDataTable() {
                this.TableName = "TestRunType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TestRunTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TestRunTypeIdColumn {
                get {
                    return this.columnTestRunTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveYnColumn {
                get {
                    return this.columnActiveYn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunTypeRow this[int index] {
                get {
                    return ((TestRunTypeRow)(this.Rows[index]));
                }
            }
            
            public event TestRunTypeRowChangeEventHandler TestRunTypeRowChanging;
            
            public event TestRunTypeRowChangeEventHandler TestRunTypeRowChanged;
            
            public event TestRunTypeRowChangeEventHandler TestRunTypeRowDeleting;
            
            public event TestRunTypeRowChangeEventHandler TestRunTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTestRunTypeRow(TestRunTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunTypeRow AddTestRunTypeRow(string Name, string ActiveYn) {
                TestRunTypeRow rowTestRunTypeRow = ((TestRunTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        ActiveYn};
                rowTestRunTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestRunTypeRow);
                return rowTestRunTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TestRunTypeDataTable cln = ((TestRunTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestRunTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTestRunTypeId = base.Columns["TestRunTypeId"];
                this.columnName = base.Columns["Name"];
                this.columnActiveYn = base.Columns["ActiveYn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTestRunTypeId = new global::System.Data.DataColumn("TestRunTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestRunTypeId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnActiveYn = new global::System.Data.DataColumn("ActiveYn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveYn);
                this.columnTestRunTypeId.AutoIncrement = true;
                this.columnTestRunTypeId.AutoIncrementSeed = -1;
                this.columnTestRunTypeId.AutoIncrementStep = -1;
                this.columnTestRunTypeId.AllowDBNull = false;
                this.columnTestRunTypeId.ReadOnly = true;
                this.columnName.AllowDBNull = false;
                this.columnActiveYn.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunTypeRow NewTestRunTypeRow() {
                return ((TestRunTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestRunTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TestRunTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestRunTypeRowChanged != null)) {
                    this.TestRunTypeRowChanged(this, new TestRunTypeRowChangeEvent(((TestRunTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestRunTypeRowChanging != null)) {
                    this.TestRunTypeRowChanging(this, new TestRunTypeRowChangeEvent(((TestRunTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestRunTypeRowDeleted != null)) {
                    this.TestRunTypeRowDeleted(this, new TestRunTypeRowChangeEvent(((TestRunTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestRunTypeRowDeleting != null)) {
                    this.TestRunTypeRowDeleting(this, new TestRunTypeRowChangeEvent(((TestRunTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTestRunTypeRow(TestRunTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TestRunData ds = new TestRunData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestRunTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnActiveYn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveYnColumn {
                get {
                    return this.columnActiveYn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(string Name, string ActiveYn) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        ActiveYn};
                rowUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnName = base.Columns["Name"];
                this.columnActiveYn = base.Columns["ActiveYn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnActiveYn = new global::System.Data.DataColumn("ActiveYn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveYn);
                this.columnUserId.AutoIncrement = true;
                this.columnUserId.AutoIncrementSeed = -1;
                this.columnUserId.AutoIncrementStep = -1;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.ReadOnly = true;
                this.columnName.AllowDBNull = false;
                this.columnActiveYn.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TestRunData ds = new TestRunData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReleaseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnReleaseId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnVersionNumber;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReleaseDataTable() {
                this.TableName = "Release";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReleaseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReleaseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReleaseIdColumn {
                get {
                    return this.columnReleaseId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionNumberColumn {
                get {
                    return this.columnVersionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReleaseRow this[int index] {
                get {
                    return ((ReleaseRow)(this.Rows[index]));
                }
            }
            
            public event ReleaseRowChangeEventHandler ReleaseRowChanging;
            
            public event ReleaseRowChangeEventHandler ReleaseRowChanged;
            
            public event ReleaseRowChangeEventHandler ReleaseRowDeleting;
            
            public event ReleaseRowChangeEventHandler ReleaseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReleaseRow(ReleaseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReleaseRow AddReleaseRow(string Name, string VersionNumber) {
                ReleaseRow rowReleaseRow = ((ReleaseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        VersionNumber};
                rowReleaseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReleaseRow);
                return rowReleaseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReleaseDataTable cln = ((ReleaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReleaseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReleaseId = base.Columns["ReleaseId"];
                this.columnName = base.Columns["Name"];
                this.columnVersionNumber = base.Columns["VersionNumber"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReleaseId = new global::System.Data.DataColumn("ReleaseId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReleaseId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnVersionNumber = new global::System.Data.DataColumn("VersionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionNumber);
                this.columnReleaseId.AutoIncrement = true;
                this.columnReleaseId.AutoIncrementSeed = -1;
                this.columnReleaseId.AutoIncrementStep = -1;
                this.columnReleaseId.AllowDBNull = false;
                this.columnReleaseId.ReadOnly = true;
                this.columnName.AllowDBNull = false;
                this.columnVersionNumber.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReleaseRow NewReleaseRow() {
                return ((ReleaseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReleaseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReleaseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReleaseRowChanged != null)) {
                    this.ReleaseRowChanged(this, new ReleaseRowChangeEvent(((ReleaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReleaseRowChanging != null)) {
                    this.ReleaseRowChanging(this, new ReleaseRowChangeEvent(((ReleaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReleaseRowDeleted != null)) {
                    this.ReleaseRowDeleted(this, new ReleaseRowChangeEvent(((ReleaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReleaseRowDeleting != null)) {
                    this.ReleaseRowDeleting(this, new ReleaseRowChangeEvent(((ReleaseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReleaseRow(ReleaseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                TestRunData ds = new TestRunData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReleaseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestRunRow : global::System.Data.DataRow {
            
            private TestRunDataTable tableTestRun;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestRun = ((TestRunDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunId {
                get {
                    return ((int)(this[this.tableTestRun.TestRunIdColumn]));
                }
                set {
                    this[this.tableTestRun.TestRunIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTestRun.NameColumn]));
                }
                set {
                    this[this.tableTestRun.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestCaseId {
                get {
                    return ((int)(this[this.tableTestRun.TestCaseIdColumn]));
                }
                set {
                    this[this.tableTestRun.TestCaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunTypeId {
                get {
                    return ((int)(this[this.tableTestRun.TestRunTypeIdColumn]));
                }
                set {
                    this[this.tableTestRun.TestRunTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TesterId {
                get {
                    return ((int)(this[this.tableTestRun.TesterIdColumn]));
                }
                set {
                    this[this.tableTestRun.TesterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExecutionStatusId {
                get {
                    return ((int)(this[this.tableTestRun.ExecutionStatusIdColumn]));
                }
                set {
                    this[this.tableTestRun.ExecutionStatusIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReleaseId {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.ReleaseIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReleaseId\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ReleaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EstimatedDuration {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.EstimatedDurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EstimatedDuration\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.EstimatedDurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActualDuration {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.ActualDurationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualDuration\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ActualDurationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartDate {
                get {
                    return ((global::System.DateTime)(this[this.tableTestRun.StartDateColumn]));
                }
                set {
                    this[this.tableTestRun.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTestRun.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunnerName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunnerTestName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerTestNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerTestName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerTestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RunnerAssertCount {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.RunnerAssertCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerAssertCount\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerAssertCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunnerMessage {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerMessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerMessage\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerMessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RunnerStackTrace {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.RunnerStackTraceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RunnerStackTrace\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.RunnerStackTraceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TestRunTypeName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.TestRunTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestRunTypeName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.TestRunTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TesterName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.TesterNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TesterName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.TesterNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecutionStatusName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.ExecutionStatusNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutionStatusName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ExecutionStatusNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReleaseName {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.ReleaseNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReleaseName\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ReleaseNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReleaseVersionNumber {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.ReleaseVersionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReleaseVersionNumber\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.ReleaseVersionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text01 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text01\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text02 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text02\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text03 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text03\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text04 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text04\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text05 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text05\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text06 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text06\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text07 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text07\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text08 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text08\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text09 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text09\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text10 {
                get {
                    try {
                        return ((string)(this[this.tableTestRun.Text10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text10\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.Text10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List01 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List01\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List02 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List02\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List03 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List03\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List04 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List04\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List05 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List05\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List06 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List06\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List07 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List07\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List08 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List08\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List09 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List09\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List10 {
                get {
                    try {
                        return ((int)(this[this.tableTestRun.List10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List10\' in table \'TestRun\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRun.List10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableTestRun.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableTestRun.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReleaseIdNull() {
                return this.IsNull(this.tableTestRun.ReleaseIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReleaseIdNull() {
                this[this.tableTestRun.ReleaseIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstimatedDurationNull() {
                return this.IsNull(this.tableTestRun.EstimatedDurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstimatedDurationNull() {
                this[this.tableTestRun.EstimatedDurationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualDurationNull() {
                return this.IsNull(this.tableTestRun.ActualDurationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualDurationNull() {
                this[this.tableTestRun.ActualDurationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableTestRun.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableTestRun.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerNameNull() {
                return this.IsNull(this.tableTestRun.RunnerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerNameNull() {
                this[this.tableTestRun.RunnerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerTestNameNull() {
                return this.IsNull(this.tableTestRun.RunnerTestNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerTestNameNull() {
                this[this.tableTestRun.RunnerTestNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerAssertCountNull() {
                return this.IsNull(this.tableTestRun.RunnerAssertCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerAssertCountNull() {
                this[this.tableTestRun.RunnerAssertCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerMessageNull() {
                return this.IsNull(this.tableTestRun.RunnerMessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerMessageNull() {
                this[this.tableTestRun.RunnerMessageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRunnerStackTraceNull() {
                return this.IsNull(this.tableTestRun.RunnerStackTraceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRunnerStackTraceNull() {
                this[this.tableTestRun.RunnerStackTraceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestRunTypeNameNull() {
                return this.IsNull(this.tableTestRun.TestRunTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestRunTypeNameNull() {
                this[this.tableTestRun.TestRunTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTesterNameNull() {
                return this.IsNull(this.tableTestRun.TesterNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTesterNameNull() {
                this[this.tableTestRun.TesterNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutionStatusNameNull() {
                return this.IsNull(this.tableTestRun.ExecutionStatusNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutionStatusNameNull() {
                this[this.tableTestRun.ExecutionStatusNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReleaseNameNull() {
                return this.IsNull(this.tableTestRun.ReleaseNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReleaseNameNull() {
                this[this.tableTestRun.ReleaseNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReleaseVersionNumberNull() {
                return this.IsNull(this.tableTestRun.ReleaseVersionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReleaseVersionNumberNull() {
                this[this.tableTestRun.ReleaseVersionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText01Null() {
                return this.IsNull(this.tableTestRun.Text01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText01Null() {
                this[this.tableTestRun.Text01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText02Null() {
                return this.IsNull(this.tableTestRun.Text02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText02Null() {
                this[this.tableTestRun.Text02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText03Null() {
                return this.IsNull(this.tableTestRun.Text03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText03Null() {
                this[this.tableTestRun.Text03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText04Null() {
                return this.IsNull(this.tableTestRun.Text04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText04Null() {
                this[this.tableTestRun.Text04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText05Null() {
                return this.IsNull(this.tableTestRun.Text05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText05Null() {
                this[this.tableTestRun.Text05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText06Null() {
                return this.IsNull(this.tableTestRun.Text06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText06Null() {
                this[this.tableTestRun.Text06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText07Null() {
                return this.IsNull(this.tableTestRun.Text07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText07Null() {
                this[this.tableTestRun.Text07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText08Null() {
                return this.IsNull(this.tableTestRun.Text08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText08Null() {
                this[this.tableTestRun.Text08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText09Null() {
                return this.IsNull(this.tableTestRun.Text09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText09Null() {
                this[this.tableTestRun.Text09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText10Null() {
                return this.IsNull(this.tableTestRun.Text10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText10Null() {
                this[this.tableTestRun.Text10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList01Null() {
                return this.IsNull(this.tableTestRun.List01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList01Null() {
                this[this.tableTestRun.List01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList02Null() {
                return this.IsNull(this.tableTestRun.List02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList02Null() {
                this[this.tableTestRun.List02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList03Null() {
                return this.IsNull(this.tableTestRun.List03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList03Null() {
                this[this.tableTestRun.List03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList04Null() {
                return this.IsNull(this.tableTestRun.List04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList04Null() {
                this[this.tableTestRun.List04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList05Null() {
                return this.IsNull(this.tableTestRun.List05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList05Null() {
                this[this.tableTestRun.List05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList06Null() {
                return this.IsNull(this.tableTestRun.List06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList06Null() {
                this[this.tableTestRun.List06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList07Null() {
                return this.IsNull(this.tableTestRun.List07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList07Null() {
                this[this.tableTestRun.List07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList08Null() {
                return this.IsNull(this.tableTestRun.List08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList08Null() {
                this[this.tableTestRun.List08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList09Null() {
                return this.IsNull(this.tableTestRun.List09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList09Null() {
                this[this.tableTestRun.List09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList10Null() {
                return this.IsNull(this.tableTestRun.List10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList10Null() {
                this[this.tableTestRun.List10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow[] GetTestRunStepRows() {
                if ((this.Table.ChildRelations["fkTestRunTestRunStep"] == null)) {
                    return new TestRunStepRow[0];
                }
                else {
                    return ((TestRunStepRow[])(base.GetChildRows(this.Table.ChildRelations["fkTestRunTestRunStep"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutionStatusRow[] GetExecutionStatusRows() {
                if ((this.Table.ChildRelations["fkTestRunExecutionStatus"] == null)) {
                    return new ExecutionStatusRow[0];
                }
                else {
                    return ((ExecutionStatusRow[])(base.GetChildRows(this.Table.ChildRelations["fkTestRunExecutionStatus"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow[] GetUserRows() {
                if ((this.Table.ChildRelations["fkTestRunTester"] == null)) {
                    return new UserRow[0];
                }
                else {
                    return ((UserRow[])(base.GetChildRows(this.Table.ChildRelations["fkTestRunTester"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReleaseRow[] GetReleaseRows() {
                if ((this.Table.ChildRelations["fkTestRunRelease"] == null)) {
                    return new ReleaseRow[0];
                }
                else {
                    return ((ReleaseRow[])(base.GetChildRows(this.Table.ChildRelations["fkTestRunRelease"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunTypeRow[] GetTestRunTypeRows() {
                if ((this.Table.ChildRelations["fkTestRunTestRunType"] == null)) {
                    return new TestRunTypeRow[0];
                }
                else {
                    return ((TestRunTypeRow[])(base.GetChildRows(this.Table.ChildRelations["fkTestRunTestRunType"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestRunStepRow : global::System.Data.DataRow {
            
            private TestRunStepDataTable tableTestRunStep;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunStepRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestRunStep = ((TestRunStepDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunStepId {
                get {
                    return ((int)(this[this.tableTestRunStep.TestRunStepIdColumn]));
                }
                set {
                    this[this.tableTestRunStep.TestRunStepIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunId {
                get {
                    return ((int)(this[this.tableTestRunStep.TestRunIdColumn]));
                }
                set {
                    this[this.tableTestRunStep.TestRunIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestStepId {
                get {
                    try {
                        return ((int)(this[this.tableTestRunStep.TestStepIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestStepId\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.TestStepIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExecutionStatusId {
                get {
                    return ((int)(this[this.tableTestRunStep.ExecutionStatusIdColumn]));
                }
                set {
                    this[this.tableTestRunStep.ExecutionStatusIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableTestRunStep.DescriptionColumn]));
                }
                set {
                    this[this.tableTestRunStep.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Position {
                get {
                    return ((int)(this[this.tableTestRunStep.PositionColumn]));
                }
                set {
                    this[this.tableTestRunStep.PositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpectedResult {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.ExpectedResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExpectedResult\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.ExpectedResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SampleData {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.SampleDataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SampleData\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.SampleDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActualResult {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.ActualResultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualResult\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.ActualResultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestCaseId {
                get {
                    try {
                        return ((int)(this[this.tableTestRunStep.TestCaseIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestCaseId\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.TestCaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExecutionStatusName {
                get {
                    try {
                        return ((string)(this[this.tableTestRunStep.ExecutionStatusNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExecutionStatusName\' in table \'TestRunStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestRunStep.ExecutionStatusNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow TestRunRow {
                get {
                    return ((TestRunRow)(this.GetParentRow(this.Table.ParentRelations["fkTestRunTestRunStep"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fkTestRunTestRunStep"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestStepIdNull() {
                return this.IsNull(this.tableTestRunStep.TestStepIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestStepIdNull() {
                this[this.tableTestRunStep.TestStepIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpectedResultNull() {
                return this.IsNull(this.tableTestRunStep.ExpectedResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpectedResultNull() {
                this[this.tableTestRunStep.ExpectedResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSampleDataNull() {
                return this.IsNull(this.tableTestRunStep.SampleDataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSampleDataNull() {
                this[this.tableTestRunStep.SampleDataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualResultNull() {
                return this.IsNull(this.tableTestRunStep.ActualResultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualResultNull() {
                this[this.tableTestRunStep.ActualResultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTestCaseIdNull() {
                return this.IsNull(this.tableTestRunStep.TestCaseIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTestCaseIdNull() {
                this[this.tableTestRunStep.TestCaseIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExecutionStatusNameNull() {
                return this.IsNull(this.tableTestRunStep.ExecutionStatusNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExecutionStatusNameNull() {
                this[this.tableTestRunStep.ExecutionStatusNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedIncidentRow[] GetLinkedIncidentRows() {
                if ((this.Table.ChildRelations["fkTestRunStepLinkedIncident"] == null)) {
                    return new LinkedIncidentRow[0];
                }
                else {
                    return ((LinkedIncidentRow[])(base.GetChildRows(this.Table.ChildRelations["fkTestRunStepLinkedIncident"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LinkedIncidentRow : global::System.Data.DataRow {
            
            private LinkedIncidentDataTable tableLinkedIncident;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LinkedIncidentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLinkedIncident = ((LinkedIncidentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunStepId {
                get {
                    return ((int)(this[this.tableLinkedIncident.TestRunStepIdColumn]));
                }
                set {
                    this[this.tableLinkedIncident.TestRunStepIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PriorityId {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.PriorityIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PriorityId\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.PriorityIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SeverityId {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.SeverityIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SeverityId\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.SeverityIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IncidentTypeId {
                get {
                    return ((int)(this[this.tableLinkedIncident.IncidentTypeIdColumn]));
                }
                set {
                    this[this.tableLinkedIncident.IncidentTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLinkedIncident.NameColumn]));
                }
                set {
                    this[this.tableLinkedIncident.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text01 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text01\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text02 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text02\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text03 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text03\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text04 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text04\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text05 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text05\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text06 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text06\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text07 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text07\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text08 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text08\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text09 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text09\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Text10 {
                get {
                    try {
                        return ((string)(this[this.tableLinkedIncident.Text10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Text10\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.Text10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List01 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List01Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List01\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List01Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List02 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List02Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List02\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List02Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List03 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List03Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List03\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List03Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List04 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List04Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List04\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List04Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List05 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List05Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List05\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List05Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List06 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List06Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List06\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List06Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List07 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List07Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List07\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List07Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List08 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List08Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List08\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List08Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List09 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List09Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List09\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List09Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int List10 {
                get {
                    try {
                        return ((int)(this[this.tableLinkedIncident.List10Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'List10\' in table \'LinkedIncident\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLinkedIncident.List10Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow TestRunStepRow {
                get {
                    return ((TestRunStepRow)(this.GetParentRow(this.Table.ParentRelations["fkTestRunStepLinkedIncident"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fkTestRunStepLinkedIncident"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityIdNull() {
                return this.IsNull(this.tableLinkedIncident.PriorityIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityIdNull() {
                this[this.tableLinkedIncident.PriorityIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeverityIdNull() {
                return this.IsNull(this.tableLinkedIncident.SeverityIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeverityIdNull() {
                this[this.tableLinkedIncident.SeverityIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText01Null() {
                return this.IsNull(this.tableLinkedIncident.Text01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText01Null() {
                this[this.tableLinkedIncident.Text01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText02Null() {
                return this.IsNull(this.tableLinkedIncident.Text02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText02Null() {
                this[this.tableLinkedIncident.Text02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText03Null() {
                return this.IsNull(this.tableLinkedIncident.Text03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText03Null() {
                this[this.tableLinkedIncident.Text03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText04Null() {
                return this.IsNull(this.tableLinkedIncident.Text04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText04Null() {
                this[this.tableLinkedIncident.Text04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText05Null() {
                return this.IsNull(this.tableLinkedIncident.Text05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText05Null() {
                this[this.tableLinkedIncident.Text05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText06Null() {
                return this.IsNull(this.tableLinkedIncident.Text06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText06Null() {
                this[this.tableLinkedIncident.Text06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText07Null() {
                return this.IsNull(this.tableLinkedIncident.Text07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText07Null() {
                this[this.tableLinkedIncident.Text07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText08Null() {
                return this.IsNull(this.tableLinkedIncident.Text08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText08Null() {
                this[this.tableLinkedIncident.Text08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText09Null() {
                return this.IsNull(this.tableLinkedIncident.Text09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText09Null() {
                this[this.tableLinkedIncident.Text09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsText10Null() {
                return this.IsNull(this.tableLinkedIncident.Text10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetText10Null() {
                this[this.tableLinkedIncident.Text10Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList01Null() {
                return this.IsNull(this.tableLinkedIncident.List01Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList01Null() {
                this[this.tableLinkedIncident.List01Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList02Null() {
                return this.IsNull(this.tableLinkedIncident.List02Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList02Null() {
                this[this.tableLinkedIncident.List02Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList03Null() {
                return this.IsNull(this.tableLinkedIncident.List03Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList03Null() {
                this[this.tableLinkedIncident.List03Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList04Null() {
                return this.IsNull(this.tableLinkedIncident.List04Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList04Null() {
                this[this.tableLinkedIncident.List04Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList05Null() {
                return this.IsNull(this.tableLinkedIncident.List05Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList05Null() {
                this[this.tableLinkedIncident.List05Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList06Null() {
                return this.IsNull(this.tableLinkedIncident.List06Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList06Null() {
                this[this.tableLinkedIncident.List06Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList07Null() {
                return this.IsNull(this.tableLinkedIncident.List07Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList07Null() {
                this[this.tableLinkedIncident.List07Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList08Null() {
                return this.IsNull(this.tableLinkedIncident.List08Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList08Null() {
                this[this.tableLinkedIncident.List08Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList09Null() {
                return this.IsNull(this.tableLinkedIncident.List09Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList09Null() {
                this[this.tableLinkedIncident.List09Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsList10Null() {
                return this.IsNull(this.tableLinkedIncident.List10Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetList10Null() {
                this[this.tableLinkedIncident.List10Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExecutionStatusRow : global::System.Data.DataRow {
            
            private ExecutionStatusDataTable tableExecutionStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExecutionStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExecutionStatus = ((ExecutionStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ExecutionStatusId {
                get {
                    return ((int)(this[this.tableExecutionStatus.ExecutionStatusIdColumn]));
                }
                set {
                    this[this.tableExecutionStatus.ExecutionStatusIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableExecutionStatus.NameColumn]));
                }
                set {
                    this[this.tableExecutionStatus.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActiveYn {
                get {
                    return ((string)(this[this.tableExecutionStatus.ActiveYnColumn]));
                }
                set {
                    this[this.tableExecutionStatus.ActiveYnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow TestRunRow {
                get {
                    return ((TestRunRow)(this.GetParentRow(this.Table.ParentRelations["fkTestRunExecutionStatus"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fkTestRunExecutionStatus"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TestRunTypeRow : global::System.Data.DataRow {
            
            private TestRunTypeDataTable tableTestRunType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TestRunTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestRunType = ((TestRunTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TestRunTypeId {
                get {
                    return ((int)(this[this.tableTestRunType.TestRunTypeIdColumn]));
                }
                set {
                    this[this.tableTestRunType.TestRunTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTestRunType.NameColumn]));
                }
                set {
                    this[this.tableTestRunType.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActiveYn {
                get {
                    return ((string)(this[this.tableTestRunType.ActiveYnColumn]));
                }
                set {
                    this[this.tableTestRunType.ActiveYnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow TestRunRow {
                get {
                    return ((TestRunRow)(this.GetParentRow(this.Table.ParentRelations["fkTestRunTestRunType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fkTestRunTestRunType"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserRow : global::System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableUser.UserIdColumn]));
                }
                set {
                    this[this.tableUser.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableUser.NameColumn]));
                }
                set {
                    this[this.tableUser.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActiveYn {
                get {
                    return ((string)(this[this.tableUser.ActiveYnColumn]));
                }
                set {
                    this[this.tableUser.ActiveYnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow TestRunRow {
                get {
                    return ((TestRunRow)(this.GetParentRow(this.Table.ParentRelations["fkTestRunTester"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fkTestRunTester"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReleaseRow : global::System.Data.DataRow {
            
            private ReleaseDataTable tableRelease;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReleaseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRelease = ((ReleaseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReleaseId {
                get {
                    return ((int)(this[this.tableRelease.ReleaseIdColumn]));
                }
                set {
                    this[this.tableRelease.ReleaseIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableRelease.NameColumn]));
                }
                set {
                    this[this.tableRelease.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VersionNumber {
                get {
                    return ((string)(this[this.tableRelease.VersionNumberColumn]));
                }
                set {
                    this[this.tableRelease.VersionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow TestRunRow {
                get {
                    return ((TestRunRow)(this.GetParentRow(this.Table.ParentRelations["fkTestRunRelease"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["fkTestRunRelease"]);
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestRunRowChangeEvent : global::System.EventArgs {
            
            private TestRunRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRowChangeEvent(TestRunRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestRunStepRowChangeEvent : global::System.EventArgs {
            
            private TestRunStepRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRowChangeEvent(TestRunStepRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunStepRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LinkedIncidentRowChangeEvent : global::System.EventArgs {
            
            private LinkedIncidentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedIncidentRowChangeEvent(LinkedIncidentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LinkedIncidentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExecutionStatusRowChangeEvent : global::System.EventArgs {
            
            private ExecutionStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutionStatusRowChangeEvent(ExecutionStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExecutionStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TestRunTypeRowChangeEvent : global::System.EventArgs {
            
            private TestRunTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunTypeRowChangeEvent(TestRunTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TestRunTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserRowChangeEvent : global::System.EventArgs {
            
            private UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReleaseRowChangeEvent : global::System.EventArgs {
            
            private ReleaseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReleaseRowChangeEvent(ReleaseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReleaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ProjectData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ProjectData : global::System.Data.DataSet {
        
        private ProjectDataTable tableProject;
        
        private ProjectUserDataTable tableProjectUser;
        
        private ProjectRoleDataTable tableProjectRole;
        
        private ProjectRolePermissionDataTable tableProjectRolePermission;
        
        private ProjectArtifactNotifyDataTable tableProjectArtifactNotify;
        
        private ProjectRoleArtifactNotifyDataTable tableProjectRoleArtifactNotify;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ProjectData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ProjectData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Project"] != null)) {
                    base.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                if ((ds.Tables["ProjectUser"] != null)) {
                    base.Tables.Add(new ProjectUserDataTable(ds.Tables["ProjectUser"]));
                }
                if ((ds.Tables["ProjectRole"] != null)) {
                    base.Tables.Add(new ProjectRoleDataTable(ds.Tables["ProjectRole"]));
                }
                if ((ds.Tables["ProjectRolePermission"] != null)) {
                    base.Tables.Add(new ProjectRolePermissionDataTable(ds.Tables["ProjectRolePermission"]));
                }
                if ((ds.Tables["ProjectArtifactNotify"] != null)) {
                    base.Tables.Add(new ProjectArtifactNotifyDataTable(ds.Tables["ProjectArtifactNotify"]));
                }
                if ((ds.Tables["ProjectRoleArtifactNotify"] != null)) {
                    base.Tables.Add(new ProjectRoleArtifactNotifyDataTable(ds.Tables["ProjectRoleArtifactNotify"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectDataTable Project {
            get {
                return this.tableProject;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectUserDataTable ProjectUser {
            get {
                return this.tableProjectUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectRoleDataTable ProjectRole {
            get {
                return this.tableProjectRole;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectRolePermissionDataTable ProjectRolePermission {
            get {
                return this.tableProjectRolePermission;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectArtifactNotifyDataTable ProjectArtifactNotify {
            get {
                return this.tableProjectArtifactNotify;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProjectRoleArtifactNotifyDataTable ProjectRoleArtifactNotify {
            get {
                return this.tableProjectRoleArtifactNotify;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ProjectData cln = ((ProjectData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Project"] != null)) {
                    base.Tables.Add(new ProjectDataTable(ds.Tables["Project"]));
                }
                if ((ds.Tables["ProjectUser"] != null)) {
                    base.Tables.Add(new ProjectUserDataTable(ds.Tables["ProjectUser"]));
                }
                if ((ds.Tables["ProjectRole"] != null)) {
                    base.Tables.Add(new ProjectRoleDataTable(ds.Tables["ProjectRole"]));
                }
                if ((ds.Tables["ProjectRolePermission"] != null)) {
                    base.Tables.Add(new ProjectRolePermissionDataTable(ds.Tables["ProjectRolePermission"]));
                }
                if ((ds.Tables["ProjectArtifactNotify"] != null)) {
                    base.Tables.Add(new ProjectArtifactNotifyDataTable(ds.Tables["ProjectArtifactNotify"]));
                }
                if ((ds.Tables["ProjectRoleArtifactNotify"] != null)) {
                    base.Tables.Add(new ProjectRoleArtifactNotifyDataTable(ds.Tables["ProjectRoleArtifactNotify"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProject = ((ProjectDataTable)(base.Tables["Project"]));
            if ((initTable == true)) {
                if ((this.tableProject != null)) {
                    this.tableProject.InitVars();
                }
            }
            this.tableProjectUser = ((ProjectUserDataTable)(base.Tables["ProjectUser"]));
            if ((initTable == true)) {
                if ((this.tableProjectUser != null)) {
                    this.tableProjectUser.InitVars();
                }
            }
            this.tableProjectRole = ((ProjectRoleDataTable)(base.Tables["ProjectRole"]));
            if ((initTable == true)) {
                if ((this.tableProjectRole != null)) {
                    this.tableProjectRole.InitVars();
                }
            }
            this.tableProjectRolePermission = ((ProjectRolePermissionDataTable)(base.Tables["ProjectRolePermission"]));
            if ((initTable == true)) {
                if ((this.tableProjectRolePermission != null)) {
                    this.tableProjectRolePermission.InitVars();
                }
            }
            this.tableProjectArtifactNotify = ((ProjectArtifactNotifyDataTable)(base.Tables["ProjectArtifactNotify"]));
            if ((initTable == true)) {
                if ((this.tableProjectArtifactNotify != null)) {
                    this.tableProjectArtifactNotify.InitVars();
                }
            }
            this.tableProjectRoleArtifactNotify = ((ProjectRoleArtifactNotifyDataTable)(base.Tables["ProjectRoleArtifactNotify"]));
            if ((initTable == true)) {
                if ((this.tableProjectRoleArtifactNotify != null)) {
                    this.tableProjectRoleArtifactNotify.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ProjectData";
            this.Prefix = "";
            this.Namespace = "http://www.inflectra.com/SpiraTest/DataSets/ProjectDataSet.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("en-US");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProject = new ProjectDataTable();
            base.Tables.Add(this.tableProject);
            this.tableProjectUser = new ProjectUserDataTable();
            base.Tables.Add(this.tableProjectUser);
            this.tableProjectRole = new ProjectRoleDataTable();
            base.Tables.Add(this.tableProjectRole);
            this.tableProjectRolePermission = new ProjectRolePermissionDataTable();
            base.Tables.Add(this.tableProjectRolePermission);
            this.tableProjectArtifactNotify = new ProjectArtifactNotifyDataTable();
            base.Tables.Add(this.tableProjectArtifactNotify);
            this.tableProjectRoleArtifactNotify = new ProjectRoleArtifactNotifyDataTable();
            base.Tables.Add(this.tableProjectRoleArtifactNotify);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProject() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectRole() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectRolePermission() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectArtifactNotify() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProjectRoleArtifactNotify() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ProjectData ds = new ProjectData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ProjectRowChangeEventHandler(object sender, ProjectRowChangeEvent e);
        
        public delegate void ProjectUserRowChangeEventHandler(object sender, ProjectUserRowChangeEvent e);
        
        public delegate void ProjectRoleRowChangeEventHandler(object sender, ProjectRoleRowChangeEvent e);
        
        public delegate void ProjectRolePermissionRowChangeEventHandler(object sender, ProjectRolePermissionRowChangeEvent e);
        
        public delegate void ProjectArtifactNotifyRowChangeEventHandler(object sender, ProjectArtifactNotifyRowChangeEvent e);
        
        public delegate void ProjectRoleArtifactNotifyRowChangeEventHandler(object sender, ProjectRoleArtifactNotifyRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnWebsite;
            
            private global::System.Data.DataColumn columnCreationDate;
            
            private global::System.Data.DataColumn columnActiveYn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectDataTable() {
                this.TableName = "Project";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIdColumn {
                get {
                    return this.columnProjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WebsiteColumn {
                get {
                    return this.columnWebsite;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreationDateColumn {
                get {
                    return this.columnCreationDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveYnColumn {
                get {
                    return this.columnActiveYn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow this[int index] {
                get {
                    return ((ProjectRow)(this.Rows[index]));
                }
            }
            
            public event ProjectRowChangeEventHandler ProjectRowChanging;
            
            public event ProjectRowChangeEventHandler ProjectRowChanged;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleting;
            
            public event ProjectRowChangeEventHandler ProjectRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectRow(ProjectRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow AddProjectRow(string Name, string Description, string Website, System.DateTime CreationDate, string ActiveYn) {
                ProjectRow rowProjectRow = ((ProjectRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Description,
                        Website,
                        CreationDate,
                        ActiveYn};
                rowProjectRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectRow);
                return rowProjectRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow FindByProjectId(int ProjectId) {
                return ((ProjectRow)(this.Rows.Find(new object[] {
                            ProjectId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectDataTable cln = ((ProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectId = base.Columns["ProjectId"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnWebsite = base.Columns["Website"];
                this.columnCreationDate = base.Columns["CreationDate"];
                this.columnActiveYn = base.Columns["ActiveYn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectId = new global::System.Data.DataColumn("ProjectId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnWebsite = new global::System.Data.DataColumn("Website", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWebsite);
                this.columnCreationDate = new global::System.Data.DataColumn("CreationDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreationDate);
                this.columnActiveYn = new global::System.Data.DataColumn("ActiveYn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveYn);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkProject", new global::System.Data.DataColumn[] {
                                this.columnProjectId}, true));
                this.columnProjectId.AutoIncrement = true;
                this.columnProjectId.AutoIncrementSeed = -1;
                this.columnProjectId.AutoIncrementStep = -1;
                this.columnProjectId.AllowDBNull = false;
                this.columnProjectId.ReadOnly = true;
                this.columnProjectId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnCreationDate.AllowDBNull = false;
                this.columnActiveYn.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow NewProjectRow() {
                return ((ProjectRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRowChanged != null)) {
                    this.ProjectRowChanged(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRowChanging != null)) {
                    this.ProjectRowChanging(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRowDeleted != null)) {
                    this.ProjectRowDeleted(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRowDeleting != null)) {
                    this.ProjectRowDeleting(this, new ProjectRowChangeEvent(((ProjectRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectRow(ProjectRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectData ds = new ProjectData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectUserDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectId;
            
            private global::System.Data.DataColumn columnUserId;
            
            private global::System.Data.DataColumn columnProjectRoleId;
            
            private global::System.Data.DataColumn columnProjectName;
            
            private global::System.Data.DataColumn columnFullName;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnProjectRoleName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUserDataTable() {
                this.TableName = "ProjectUser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectUserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectUserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIdColumn {
                get {
                    return this.columnProjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectRoleIdColumn {
                get {
                    return this.columnProjectRoleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FullNameColumn {
                get {
                    return this.columnFullName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectRoleNameColumn {
                get {
                    return this.columnProjectRoleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUserRow this[int index] {
                get {
                    return ((ProjectUserRow)(this.Rows[index]));
                }
            }
            
            public event ProjectUserRowChangeEventHandler ProjectUserRowChanging;
            
            public event ProjectUserRowChangeEventHandler ProjectUserRowChanged;
            
            public event ProjectUserRowChangeEventHandler ProjectUserRowDeleting;
            
            public event ProjectUserRowChangeEventHandler ProjectUserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectUserRow(ProjectUserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUserRow AddProjectUserRow(int ProjectId, int UserId, int ProjectRoleId, string ProjectName, string FullName, string UserName, string ProjectRoleName) {
                ProjectUserRow rowProjectUserRow = ((ProjectUserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectId,
                        UserId,
                        ProjectRoleId,
                        ProjectName,
                        FullName,
                        UserName,
                        ProjectRoleName};
                rowProjectUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectUserRow);
                return rowProjectUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUserRow FindByProjectIdUserId(int ProjectId, int UserId) {
                return ((ProjectUserRow)(this.Rows.Find(new object[] {
                            ProjectId,
                            UserId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectUserDataTable cln = ((ProjectUserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectUserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectId = base.Columns["ProjectId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnProjectRoleId = base.Columns["ProjectRoleId"];
                this.columnProjectName = base.Columns["ProjectName"];
                this.columnFullName = base.Columns["FullName"];
                this.columnUserName = base.Columns["UserName"];
                this.columnProjectRoleName = base.Columns["ProjectRoleName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectId = new global::System.Data.DataColumn("ProjectId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectId);
                this.columnUserId = new global::System.Data.DataColumn("UserId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnProjectRoleId = new global::System.Data.DataColumn("ProjectRoleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectRoleId);
                this.columnProjectName = new global::System.Data.DataColumn("ProjectName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectName);
                this.columnFullName = new global::System.Data.DataColumn("FullName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullName);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnProjectRoleName = new global::System.Data.DataColumn("ProjectRoleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectRoleName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkProjectUser", new global::System.Data.DataColumn[] {
                                this.columnProjectId,
                                this.columnUserId}, true));
                this.columnProjectId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
                this.columnProjectRoleId.AllowDBNull = false;
                this.columnProjectName.AllowDBNull = false;
                this.columnProjectName.ReadOnly = true;
                this.columnFullName.AllowDBNull = false;
                this.columnFullName.ReadOnly = true;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.ReadOnly = true;
                this.columnProjectRoleName.AllowDBNull = false;
                this.columnProjectRoleName.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUserRow NewProjectUserRow() {
                return ((ProjectUserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectUserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectUserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectUserRowChanged != null)) {
                    this.ProjectUserRowChanged(this, new ProjectUserRowChangeEvent(((ProjectUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectUserRowChanging != null)) {
                    this.ProjectUserRowChanging(this, new ProjectUserRowChangeEvent(((ProjectUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectUserRowDeleted != null)) {
                    this.ProjectUserRowDeleted(this, new ProjectUserRowChangeEvent(((ProjectUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectUserRowDeleting != null)) {
                    this.ProjectUserRowDeleting(this, new ProjectUserRowChangeEvent(((ProjectUserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectUserRow(ProjectUserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectData ds = new ProjectData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectUserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectRoleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectRoleId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnAdminYn;
            
            private global::System.Data.DataColumn columnActiveYn;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleDataTable() {
                this.TableName = "ProjectRole";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectRoleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectRoleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectRoleIdColumn {
                get {
                    return this.columnProjectRoleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdminYnColumn {
                get {
                    return this.columnAdminYn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveYnColumn {
                get {
                    return this.columnActiveYn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleRow this[int index] {
                get {
                    return ((ProjectRoleRow)(this.Rows[index]));
                }
            }
            
            public event ProjectRoleRowChangeEventHandler ProjectRoleRowChanging;
            
            public event ProjectRoleRowChangeEventHandler ProjectRoleRowChanged;
            
            public event ProjectRoleRowChangeEventHandler ProjectRoleRowDeleting;
            
            public event ProjectRoleRowChangeEventHandler ProjectRoleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectRoleRow(ProjectRoleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleRow AddProjectRoleRow(string Name, string Description, string AdminYn, string ActiveYn) {
                ProjectRoleRow rowProjectRoleRow = ((ProjectRoleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Name,
                        Description,
                        AdminYn,
                        ActiveYn};
                rowProjectRoleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectRoleRow);
                return rowProjectRoleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleRow FindByProjectRoleId(int ProjectRoleId) {
                return ((ProjectRoleRow)(this.Rows.Find(new object[] {
                            ProjectRoleId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectRoleDataTable cln = ((ProjectRoleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectRoleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectRoleId = base.Columns["ProjectRoleId"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnAdminYn = base.Columns["AdminYn"];
                this.columnActiveYn = base.Columns["ActiveYn"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectRoleId = new global::System.Data.DataColumn("ProjectRoleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectRoleId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnAdminYn = new global::System.Data.DataColumn("AdminYn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdminYn);
                this.columnActiveYn = new global::System.Data.DataColumn("ActiveYn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveYn);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkProjectRole", new global::System.Data.DataColumn[] {
                                this.columnProjectRoleId}, true));
                this.columnProjectRoleId.AutoIncrement = true;
                this.columnProjectRoleId.AutoIncrementSeed = -1;
                this.columnProjectRoleId.AutoIncrementStep = -1;
                this.columnProjectRoleId.AllowDBNull = false;
                this.columnProjectRoleId.ReadOnly = true;
                this.columnProjectRoleId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnAdminYn.AllowDBNull = false;
                this.columnActiveYn.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleRow NewProjectRoleRow() {
                return ((ProjectRoleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectRoleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectRoleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRoleRowChanged != null)) {
                    this.ProjectRoleRowChanged(this, new ProjectRoleRowChangeEvent(((ProjectRoleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRoleRowChanging != null)) {
                    this.ProjectRoleRowChanging(this, new ProjectRoleRowChangeEvent(((ProjectRoleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRoleRowDeleted != null)) {
                    this.ProjectRoleRowDeleted(this, new ProjectRoleRowChangeEvent(((ProjectRoleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRoleRowDeleting != null)) {
                    this.ProjectRoleRowDeleting(this, new ProjectRoleRowChangeEvent(((ProjectRoleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectRoleRow(ProjectRoleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectData ds = new ProjectData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectRoleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectRolePermissionDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectRoleId;
            
            private global::System.Data.DataColumn columnArtifactTypeId;
            
            private global::System.Data.DataColumn columnPermissionId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRolePermissionDataTable() {
                this.TableName = "ProjectRolePermission";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectRolePermissionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectRolePermissionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectRoleIdColumn {
                get {
                    return this.columnProjectRoleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArtifactTypeIdColumn {
                get {
                    return this.columnArtifactTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermissionIdColumn {
                get {
                    return this.columnPermissionId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRolePermissionRow this[int index] {
                get {
                    return ((ProjectRolePermissionRow)(this.Rows[index]));
                }
            }
            
            public event ProjectRolePermissionRowChangeEventHandler ProjectRolePermissionRowChanging;
            
            public event ProjectRolePermissionRowChangeEventHandler ProjectRolePermissionRowChanged;
            
            public event ProjectRolePermissionRowChangeEventHandler ProjectRolePermissionRowDeleting;
            
            public event ProjectRolePermissionRowChangeEventHandler ProjectRolePermissionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectRolePermissionRow(ProjectRolePermissionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRolePermissionRow AddProjectRolePermissionRow(int ProjectRoleId, int ArtifactTypeId, int PermissionId) {
                ProjectRolePermissionRow rowProjectRolePermissionRow = ((ProjectRolePermissionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectRoleId,
                        ArtifactTypeId,
                        PermissionId};
                rowProjectRolePermissionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectRolePermissionRow);
                return rowProjectRolePermissionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRolePermissionRow FindByProjectRoleIdArtifactTypeIdPermissionId(int ProjectRoleId, int ArtifactTypeId, int PermissionId) {
                return ((ProjectRolePermissionRow)(this.Rows.Find(new object[] {
                            ProjectRoleId,
                            ArtifactTypeId,
                            PermissionId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectRolePermissionDataTable cln = ((ProjectRolePermissionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectRolePermissionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectRoleId = base.Columns["ProjectRoleId"];
                this.columnArtifactTypeId = base.Columns["ArtifactTypeId"];
                this.columnPermissionId = base.Columns["PermissionId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectRoleId = new global::System.Data.DataColumn("ProjectRoleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectRoleId);
                this.columnArtifactTypeId = new global::System.Data.DataColumn("ArtifactTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtifactTypeId);
                this.columnPermissionId = new global::System.Data.DataColumn("PermissionId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermissionId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkProjectRolePermission", new global::System.Data.DataColumn[] {
                                this.columnProjectRoleId,
                                this.columnArtifactTypeId,
                                this.columnPermissionId}, true));
                this.columnProjectRoleId.AllowDBNull = false;
                this.columnArtifactTypeId.AllowDBNull = false;
                this.columnPermissionId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRolePermissionRow NewProjectRolePermissionRow() {
                return ((ProjectRolePermissionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectRolePermissionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectRolePermissionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRolePermissionRowChanged != null)) {
                    this.ProjectRolePermissionRowChanged(this, new ProjectRolePermissionRowChangeEvent(((ProjectRolePermissionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRolePermissionRowChanging != null)) {
                    this.ProjectRolePermissionRowChanging(this, new ProjectRolePermissionRowChangeEvent(((ProjectRolePermissionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRolePermissionRowDeleted != null)) {
                    this.ProjectRolePermissionRowDeleted(this, new ProjectRolePermissionRowChangeEvent(((ProjectRolePermissionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRolePermissionRowDeleting != null)) {
                    this.ProjectRolePermissionRowDeleting(this, new ProjectRolePermissionRowChangeEvent(((ProjectRolePermissionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectRolePermissionRow(ProjectRolePermissionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectData ds = new ProjectData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectRolePermissionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectArtifactNotifyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectId;
            
            private global::System.Data.DataColumn columnArtifactTypeId;
            
            private global::System.Data.DataColumn columnProjectArtifactNotifyTypeId;
            
            private global::System.Data.DataColumn columnArtifactTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectArtifactNotifyDataTable() {
                this.TableName = "ProjectArtifactNotify";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectArtifactNotifyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectArtifactNotifyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIdColumn {
                get {
                    return this.columnProjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArtifactTypeIdColumn {
                get {
                    return this.columnArtifactTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectArtifactNotifyTypeIdColumn {
                get {
                    return this.columnProjectArtifactNotifyTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArtifactTypeNameColumn {
                get {
                    return this.columnArtifactTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectArtifactNotifyRow this[int index] {
                get {
                    return ((ProjectArtifactNotifyRow)(this.Rows[index]));
                }
            }
            
            public event ProjectArtifactNotifyRowChangeEventHandler ProjectArtifactNotifyRowChanging;
            
            public event ProjectArtifactNotifyRowChangeEventHandler ProjectArtifactNotifyRowChanged;
            
            public event ProjectArtifactNotifyRowChangeEventHandler ProjectArtifactNotifyRowDeleting;
            
            public event ProjectArtifactNotifyRowChangeEventHandler ProjectArtifactNotifyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectArtifactNotifyRow(ProjectArtifactNotifyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectArtifactNotifyRow AddProjectArtifactNotifyRow(int ProjectId, int ArtifactTypeId, int ProjectArtifactNotifyTypeId, string ArtifactTypeName) {
                ProjectArtifactNotifyRow rowProjectArtifactNotifyRow = ((ProjectArtifactNotifyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectId,
                        ArtifactTypeId,
                        ProjectArtifactNotifyTypeId,
                        ArtifactTypeName};
                rowProjectArtifactNotifyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectArtifactNotifyRow);
                return rowProjectArtifactNotifyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectArtifactNotifyRow FindByProjectIdArtifactTypeIdProjectArtifactNotifyTypeId(int ProjectId, int ArtifactTypeId, int ProjectArtifactNotifyTypeId) {
                return ((ProjectArtifactNotifyRow)(this.Rows.Find(new object[] {
                            ProjectId,
                            ArtifactTypeId,
                            ProjectArtifactNotifyTypeId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectArtifactNotifyDataTable cln = ((ProjectArtifactNotifyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectArtifactNotifyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectId = base.Columns["ProjectId"];
                this.columnArtifactTypeId = base.Columns["ArtifactTypeId"];
                this.columnProjectArtifactNotifyTypeId = base.Columns["ProjectArtifactNotifyTypeId"];
                this.columnArtifactTypeName = base.Columns["ArtifactTypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectId = new global::System.Data.DataColumn("ProjectId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectId);
                this.columnArtifactTypeId = new global::System.Data.DataColumn("ArtifactTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtifactTypeId);
                this.columnProjectArtifactNotifyTypeId = new global::System.Data.DataColumn("ProjectArtifactNotifyTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectArtifactNotifyTypeId);
                this.columnArtifactTypeName = new global::System.Data.DataColumn("ArtifactTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtifactTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkProjectArtifactNotify", new global::System.Data.DataColumn[] {
                                this.columnProjectId,
                                this.columnArtifactTypeId,
                                this.columnProjectArtifactNotifyTypeId}, true));
                this.columnProjectId.AllowDBNull = false;
                this.columnArtifactTypeId.AllowDBNull = false;
                this.columnProjectArtifactNotifyTypeId.AllowDBNull = false;
                this.columnArtifactTypeName.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectArtifactNotifyRow NewProjectArtifactNotifyRow() {
                return ((ProjectArtifactNotifyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectArtifactNotifyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectArtifactNotifyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectArtifactNotifyRowChanged != null)) {
                    this.ProjectArtifactNotifyRowChanged(this, new ProjectArtifactNotifyRowChangeEvent(((ProjectArtifactNotifyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectArtifactNotifyRowChanging != null)) {
                    this.ProjectArtifactNotifyRowChanging(this, new ProjectArtifactNotifyRowChangeEvent(((ProjectArtifactNotifyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectArtifactNotifyRowDeleted != null)) {
                    this.ProjectArtifactNotifyRowDeleted(this, new ProjectArtifactNotifyRowChangeEvent(((ProjectArtifactNotifyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectArtifactNotifyRowDeleting != null)) {
                    this.ProjectArtifactNotifyRowDeleting(this, new ProjectArtifactNotifyRowChangeEvent(((ProjectArtifactNotifyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectArtifactNotifyRow(ProjectArtifactNotifyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectData ds = new ProjectData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectArtifactNotifyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProjectRoleArtifactNotifyDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnProjectId;
            
            private global::System.Data.DataColumn columnArtifactTypeId;
            
            private global::System.Data.DataColumn columnProjectRoleId;
            
            private global::System.Data.DataColumn columnArtifactTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleArtifactNotifyDataTable() {
                this.TableName = "ProjectRoleArtifactNotify";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectRoleArtifactNotifyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProjectRoleArtifactNotifyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectIdColumn {
                get {
                    return this.columnProjectId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArtifactTypeIdColumn {
                get {
                    return this.columnArtifactTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProjectRoleIdColumn {
                get {
                    return this.columnProjectRoleId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ArtifactTypeNameColumn {
                get {
                    return this.columnArtifactTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleArtifactNotifyRow this[int index] {
                get {
                    return ((ProjectRoleArtifactNotifyRow)(this.Rows[index]));
                }
            }
            
            public event ProjectRoleArtifactNotifyRowChangeEventHandler ProjectRoleArtifactNotifyRowChanging;
            
            public event ProjectRoleArtifactNotifyRowChangeEventHandler ProjectRoleArtifactNotifyRowChanged;
            
            public event ProjectRoleArtifactNotifyRowChangeEventHandler ProjectRoleArtifactNotifyRowDeleting;
            
            public event ProjectRoleArtifactNotifyRowChangeEventHandler ProjectRoleArtifactNotifyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProjectRoleArtifactNotifyRow(ProjectRoleArtifactNotifyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleArtifactNotifyRow AddProjectRoleArtifactNotifyRow(int ProjectId, int ArtifactTypeId, int ProjectRoleId, string ArtifactTypeName) {
                ProjectRoleArtifactNotifyRow rowProjectRoleArtifactNotifyRow = ((ProjectRoleArtifactNotifyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ProjectId,
                        ArtifactTypeId,
                        ProjectRoleId,
                        ArtifactTypeName};
                rowProjectRoleArtifactNotifyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProjectRoleArtifactNotifyRow);
                return rowProjectRoleArtifactNotifyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleArtifactNotifyRow FindByProjectIdArtifactTypeIdProjectRoleId(int ProjectId, int ArtifactTypeId, int ProjectRoleId) {
                return ((ProjectRoleArtifactNotifyRow)(this.Rows.Find(new object[] {
                            ProjectId,
                            ArtifactTypeId,
                            ProjectRoleId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProjectRoleArtifactNotifyDataTable cln = ((ProjectRoleArtifactNotifyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProjectRoleArtifactNotifyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProjectId = base.Columns["ProjectId"];
                this.columnArtifactTypeId = base.Columns["ArtifactTypeId"];
                this.columnProjectRoleId = base.Columns["ProjectRoleId"];
                this.columnArtifactTypeName = base.Columns["ArtifactTypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProjectId = new global::System.Data.DataColumn("ProjectId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectId);
                this.columnArtifactTypeId = new global::System.Data.DataColumn("ArtifactTypeId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtifactTypeId);
                this.columnProjectRoleId = new global::System.Data.DataColumn("ProjectRoleId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProjectRoleId);
                this.columnArtifactTypeName = new global::System.Data.DataColumn("ArtifactTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtifactTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkProjectRoleArtifactNotify", new global::System.Data.DataColumn[] {
                                this.columnProjectId,
                                this.columnArtifactTypeId,
                                this.columnProjectRoleId}, true));
                this.columnProjectId.AllowDBNull = false;
                this.columnArtifactTypeId.AllowDBNull = false;
                this.columnProjectRoleId.AllowDBNull = false;
                this.columnArtifactTypeName.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleArtifactNotifyRow NewProjectRoleArtifactNotifyRow() {
                return ((ProjectRoleArtifactNotifyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProjectRoleArtifactNotifyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProjectRoleArtifactNotifyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProjectRoleArtifactNotifyRowChanged != null)) {
                    this.ProjectRoleArtifactNotifyRowChanged(this, new ProjectRoleArtifactNotifyRowChangeEvent(((ProjectRoleArtifactNotifyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProjectRoleArtifactNotifyRowChanging != null)) {
                    this.ProjectRoleArtifactNotifyRowChanging(this, new ProjectRoleArtifactNotifyRowChangeEvent(((ProjectRoleArtifactNotifyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProjectRoleArtifactNotifyRowDeleted != null)) {
                    this.ProjectRoleArtifactNotifyRowDeleted(this, new ProjectRoleArtifactNotifyRowChangeEvent(((ProjectRoleArtifactNotifyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProjectRoleArtifactNotifyRowDeleting != null)) {
                    this.ProjectRoleArtifactNotifyRowDeleting(this, new ProjectRoleArtifactNotifyRowChangeEvent(((ProjectRoleArtifactNotifyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProjectRoleArtifactNotifyRow(ProjectRoleArtifactNotifyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ProjectData ds = new ProjectData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProjectRoleArtifactNotifyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectRow : global::System.Data.DataRow {
            
            private ProjectDataTable tableProject;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProject = ((ProjectDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectId {
                get {
                    return ((int)(this[this.tableProject.ProjectIdColumn]));
                }
                set {
                    this[this.tableProject.ProjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProject.NameColumn]));
                }
                set {
                    this[this.tableProject.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableProject.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Project\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Website {
                get {
                    try {
                        return ((string)(this[this.tableProject.WebsiteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Website\' in table \'Project\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProject.WebsiteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreationDate {
                get {
                    return ((global::System.DateTime)(this[this.tableProject.CreationDateColumn]));
                }
                set {
                    this[this.tableProject.CreationDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActiveYn {
                get {
                    return ((string)(this[this.tableProject.ActiveYnColumn]));
                }
                set {
                    this[this.tableProject.ActiveYnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableProject.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableProject.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWebsiteNull() {
                return this.IsNull(this.tableProject.WebsiteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWebsiteNull() {
                this[this.tableProject.WebsiteColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectUserRow : global::System.Data.DataRow {
            
            private ProjectUserDataTable tableProjectUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectUserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectUser = ((ProjectUserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectId {
                get {
                    return ((int)(this[this.tableProjectUser.ProjectIdColumn]));
                }
                set {
                    this[this.tableProjectUser.ProjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableProjectUser.UserIdColumn]));
                }
                set {
                    this[this.tableProjectUser.UserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectRoleId {
                get {
                    return ((int)(this[this.tableProjectUser.ProjectRoleIdColumn]));
                }
                set {
                    this[this.tableProjectUser.ProjectRoleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectName {
                get {
                    return ((string)(this[this.tableProjectUser.ProjectNameColumn]));
                }
                set {
                    this[this.tableProjectUser.ProjectNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullName {
                get {
                    return ((string)(this[this.tableProjectUser.FullNameColumn]));
                }
                set {
                    this[this.tableProjectUser.FullNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableProjectUser.UserNameColumn]));
                }
                set {
                    this[this.tableProjectUser.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProjectRoleName {
                get {
                    return ((string)(this[this.tableProjectUser.ProjectRoleNameColumn]));
                }
                set {
                    this[this.tableProjectUser.ProjectRoleNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectRoleRow : global::System.Data.DataRow {
            
            private ProjectRoleDataTable tableProjectRole;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectRoleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectRole = ((ProjectRoleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectRoleId {
                get {
                    return ((int)(this[this.tableProjectRole.ProjectRoleIdColumn]));
                }
                set {
                    this[this.tableProjectRole.ProjectRoleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProjectRole.NameColumn]));
                }
                set {
                    this[this.tableProjectRole.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableProjectRole.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'ProjectRole\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProjectRole.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AdminYn {
                get {
                    return ((string)(this[this.tableProjectRole.AdminYnColumn]));
                }
                set {
                    this[this.tableProjectRole.AdminYnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ActiveYn {
                get {
                    return ((string)(this[this.tableProjectRole.ActiveYnColumn]));
                }
                set {
                    this[this.tableProjectRole.ActiveYnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableProjectRole.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableProjectRole.DescriptionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectRolePermissionRow : global::System.Data.DataRow {
            
            private ProjectRolePermissionDataTable tableProjectRolePermission;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectRolePermissionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectRolePermission = ((ProjectRolePermissionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectRoleId {
                get {
                    return ((int)(this[this.tableProjectRolePermission.ProjectRoleIdColumn]));
                }
                set {
                    this[this.tableProjectRolePermission.ProjectRoleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ArtifactTypeId {
                get {
                    return ((int)(this[this.tableProjectRolePermission.ArtifactTypeIdColumn]));
                }
                set {
                    this[this.tableProjectRolePermission.ArtifactTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PermissionId {
                get {
                    return ((int)(this[this.tableProjectRolePermission.PermissionIdColumn]));
                }
                set {
                    this[this.tableProjectRolePermission.PermissionIdColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectArtifactNotifyRow : global::System.Data.DataRow {
            
            private ProjectArtifactNotifyDataTable tableProjectArtifactNotify;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectArtifactNotifyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectArtifactNotify = ((ProjectArtifactNotifyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectId {
                get {
                    return ((int)(this[this.tableProjectArtifactNotify.ProjectIdColumn]));
                }
                set {
                    this[this.tableProjectArtifactNotify.ProjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ArtifactTypeId {
                get {
                    return ((int)(this[this.tableProjectArtifactNotify.ArtifactTypeIdColumn]));
                }
                set {
                    this[this.tableProjectArtifactNotify.ArtifactTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectArtifactNotifyTypeId {
                get {
                    return ((int)(this[this.tableProjectArtifactNotify.ProjectArtifactNotifyTypeIdColumn]));
                }
                set {
                    this[this.tableProjectArtifactNotify.ProjectArtifactNotifyTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtifactTypeName {
                get {
                    try {
                        return ((string)(this[this.tableProjectArtifactNotify.ArtifactTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArtifactTypeName\' in table \'ProjectArtifactNotify\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableProjectArtifactNotify.ArtifactTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtifactTypeNameNull() {
                return this.IsNull(this.tableProjectArtifactNotify.ArtifactTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtifactTypeNameNull() {
                this[this.tableProjectArtifactNotify.ArtifactTypeNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProjectRoleArtifactNotifyRow : global::System.Data.DataRow {
            
            private ProjectRoleArtifactNotifyDataTable tableProjectRoleArtifactNotify;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProjectRoleArtifactNotifyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProjectRoleArtifactNotify = ((ProjectRoleArtifactNotifyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectId {
                get {
                    return ((int)(this[this.tableProjectRoleArtifactNotify.ProjectIdColumn]));
                }
                set {
                    this[this.tableProjectRoleArtifactNotify.ProjectIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ArtifactTypeId {
                get {
                    return ((int)(this[this.tableProjectRoleArtifactNotify.ArtifactTypeIdColumn]));
                }
                set {
                    this[this.tableProjectRoleArtifactNotify.ArtifactTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProjectRoleId {
                get {
                    return ((int)(this[this.tableProjectRoleArtifactNotify.ProjectRoleIdColumn]));
                }
                set {
                    this[this.tableProjectRoleArtifactNotify.ProjectRoleIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtifactTypeName {
                get {
                    try {
                        return ((string)(this[this.tableProjectRoleArtifactNotify.ArtifactTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ArtifactTypeName\' in table \'ProjectRoleArtifactNotify\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableProjectRoleArtifactNotify.ArtifactTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtifactTypeNameNull() {
                return this.IsNull(this.tableProjectRoleArtifactNotify.ArtifactTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtifactTypeNameNull() {
                this[this.tableProjectRoleArtifactNotify.ArtifactTypeNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectRowChangeEvent : global::System.EventArgs {
            
            private ProjectRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRowChangeEvent(ProjectRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectUserRowChangeEvent : global::System.EventArgs {
            
            private ProjectUserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUserRowChangeEvent(ProjectUserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectUserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectRoleRowChangeEvent : global::System.EventArgs {
            
            private ProjectRoleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleRowChangeEvent(ProjectRoleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectRolePermissionRowChangeEvent : global::System.EventArgs {
            
            private ProjectRolePermissionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRolePermissionRowChangeEvent(ProjectRolePermissionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRolePermissionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectArtifactNotifyRowChangeEvent : global::System.EventArgs {
            
            private ProjectArtifactNotifyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectArtifactNotifyRowChangeEvent(ProjectArtifactNotifyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectArtifactNotifyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProjectRoleArtifactNotifyRowChangeEvent : global::System.EventArgs {
            
            private ProjectRoleArtifactNotifyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleArtifactNotifyRowChangeEvent(ProjectRoleArtifactNotifyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProjectRoleArtifactNotifyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void ConnectToProjectCompletedEventHandler(object sender, ConnectToProjectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectToProjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectToProjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveTestRunByIdCompletedEventHandler(object sender, RetrieveTestRunByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveTestRunByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveTestRunByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TestRunData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TestRunData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RecordTestRun2CompletedEventHandler(object sender, RecordTestRun2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordTestRun2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordTestRun2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RecordTestRunCompletedEventHandler(object sender, RecordTestRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecordTestRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecordTestRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveServerDateTimeCompletedEventHandler(object sender, RetrieveServerDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveServerDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveServerDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.DateTime Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DisconnectCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void RetrieveProjectListCompletedEventHandler(object sender, RetrieveProjectListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveProjectListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveProjectListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ProjectData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ProjectData)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591